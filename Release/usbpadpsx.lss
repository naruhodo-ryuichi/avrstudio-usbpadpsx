
usbpadpsx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000013d0  00001464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800112  00800112  00001476  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001476  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000014a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000006b  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000014  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000199  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b8 c2       	rjmp	.+1392   	; 0x572 <__ctors_end>
       2:	ec c2       	rjmp	.+1496   	; 0x5dc <__vector_1>
       4:	d1 c2       	rjmp	.+1442   	; 0x5a8 <__bad_interrupt>
       6:	d0 c2       	rjmp	.+1440   	; 0x5a8 <__bad_interrupt>
       8:	cf c2       	rjmp	.+1438   	; 0x5a8 <__bad_interrupt>
       a:	ce c2       	rjmp	.+1436   	; 0x5a8 <__bad_interrupt>
       c:	cd c2       	rjmp	.+1434   	; 0x5a8 <__bad_interrupt>
       e:	cc c2       	rjmp	.+1432   	; 0x5a8 <__bad_interrupt>
      10:	cb c2       	rjmp	.+1430   	; 0x5a8 <__bad_interrupt>
      12:	ca c2       	rjmp	.+1428   	; 0x5a8 <__bad_interrupt>
      14:	c9 c2       	rjmp	.+1426   	; 0x5a8 <__bad_interrupt>
      16:	1e c9       	rjmp	.-3524   	; 0xfffff254 <__eeprom_end+0xff7ef254>
      18:	34 c9       	rjmp	.-3480   	; 0xfffff282 <__eeprom_end+0xff7ef282>
      1a:	c6 c2       	rjmp	.+1420   	; 0x5a8 <__bad_interrupt>
      1c:	c5 c2       	rjmp	.+1418   	; 0x5a8 <__bad_interrupt>
      1e:	c4 c2       	rjmp	.+1416   	; 0x5a8 <__bad_interrupt>
      20:	c3 c2       	rjmp	.+1414   	; 0x5a8 <__bad_interrupt>
      22:	c2 c2       	rjmp	.+1412   	; 0x5a8 <__bad_interrupt>
      24:	c1 c2       	rjmp	.+1410   	; 0x5a8 <__bad_interrupt>
      26:	c0 c2       	rjmp	.+1408   	; 0x5a8 <__bad_interrupt>
      28:	bf c2       	rjmp	.+1406   	; 0x5a8 <__bad_interrupt>
      2a:	be c2       	rjmp	.+1404   	; 0x5a8 <__bad_interrupt>
      2c:	bd c2       	rjmp	.+1402   	; 0x5a8 <__bad_interrupt>
      2e:	bc c2       	rjmp	.+1400   	; 0x5a8 <__bad_interrupt>
      30:	bb c2       	rjmp	.+1398   	; 0x5a8 <__bad_interrupt>
      32:	ba c2       	rjmp	.+1396   	; 0x5a8 <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	05 01       	movw	r0, r10
      36:	09 04       	cpc	r0, r9
      38:	a1 01       	movw	r20, r2
      3a:	09 01       	movw	r0, r18
      3c:	a1 00       	.word	0x00a1	; ????
      3e:	85 01       	movw	r16, r10
      40:	09 30       	cpi	r16, 0x09	; 9
      42:	09 31       	cpi	r16, 0x19	; 25
      44:	15 00       	.word	0x0015	; ????
      46:	25 0f       	add	r18, r21
      48:	75 04       	cpc	r7, r5
      4a:	95 02       	muls	r25, r21
      4c:	81 02       	muls	r24, r17
      4e:	09 32       	cpi	r16, 0x29	; 41
      50:	09 33       	cpi	r16, 0x39	; 57
      52:	09 34       	cpi	r16, 0x49	; 73
      54:	09 35       	cpi	r16, 0x59	; 89
      56:	15 00       	.word	0x0015	; ????
      58:	26 ff       	sbrs	r18, 6
      5a:	00 75       	andi	r16, 0x50	; 80
      5c:	08 95       	ret
      5e:	04 81       	ldd	r16, Z+4	; 0x04
      60:	02 05       	cpc	r16, r2
      62:	09 19       	sub	r16, r9
      64:	01 29       	or	r16, r1
      66:	10 15       	cp	r17, r0
      68:	00 25       	eor	r16, r0
      6a:	01 75       	andi	r16, 0x51	; 81
      6c:	01 95       	neg	r16
      6e:	10 81       	ld	r17, Z
      70:	02 c0       	rjmp	.+4      	; 0x76 <__SREG__+0x37>
      72:	05 0f       	add	r16, r21
      74:	09 92       	st	Y+, r0
      76:	a1 02       	muls	r26, r17
      78:	85 02       	muls	r24, r21
      7a:	09 9f       	mul	r16, r25
      7c:	09 a0       	ldd	r0, Y+33	; 0x21
      7e:	09 a4       	ldd	r0, Y+41	; 0x29
      80:	09 a5       	ldd	r16, Y+41	; 0x29
      82:	09 a6       	std	Y+41, r0	; 0x29
      84:	15 00       	.word	0x0015	; ????
      86:	25 01       	movw	r4, r10
      88:	35 00       	.word	0x0035	; ????
      8a:	45 01       	movw	r8, r10
      8c:	75 01       	movw	r14, r10
      8e:	95 05       	cpc	r25, r5
      90:	81 02       	muls	r24, r17
      92:	95 03       	fmuls	r17, r21
      94:	81 03       	fmuls	r16, r17
      96:	09 94       	ijmp
      98:	15 00       	.word	0x0015	; ????
      9a:	25 01       	movw	r4, r10
      9c:	35 00       	.word	0x0035	; ????
      9e:	45 01       	movw	r8, r10
      a0:	75 01       	movw	r14, r10
      a2:	95 01       	movw	r18, r10
      a4:	81 02       	muls	r24, r17
      a6:	09 22       	and	r0, r25
      a8:	15 01       	movw	r2, r10
      aa:	25 28       	or	r2, r5
      ac:	35 01       	movw	r6, r10
      ae:	45 28       	or	r4, r5
      b0:	75 07       	cpc	r23, r21
      b2:	95 01       	movw	r18, r10
      b4:	81 02       	muls	r24, r17
      b6:	c0 09       	sbc	r28, r0
      b8:	21 a1       	ldd	r18, Z+33	; 0x21
      ba:	02 85       	ldd	r16, Z+10	; 0x0a
      bc:	01 09       	sbc	r16, r1
      be:	22 15       	cp	r18, r2
      c0:	01 25       	eor	r16, r1
      c2:	28 35       	cpi	r18, 0x58	; 88
      c4:	01 45       	sbci	r16, 0x51	; 81
      c6:	28 75       	andi	r18, 0x58	; 88
      c8:	08 95       	ret
      ca:	01 91       	ld	r16, Z+
      cc:	02 09       	sbc	r16, r2
      ce:	25 a1       	ldd	r18, Z+37	; 0x25
      d0:	02 09       	sbc	r16, r2
      d2:	26 09       	sbc	r18, r6
      d4:	27 09       	sbc	r18, r7
      d6:	30 09       	sbc	r19, r0
      d8:	31 09       	sbc	r19, r1
      da:	32 09       	sbc	r19, r2
      dc:	33 09       	sbc	r19, r3
      de:	34 09       	sbc	r19, r4
      e0:	40 09       	sbc	r20, r0
      e2:	41 09       	sbc	r20, r1
      e4:	42 09       	sbc	r20, r2
      e6:	43 09       	sbc	r20, r3
      e8:	28 25       	eor	r18, r8
      ea:	0c 15       	cp	r16, r12
      ec:	01 35       	cpi	r16, 0x51	; 81
      ee:	01 45       	sbci	r16, 0x51	; 81
      f0:	0c 75       	andi	r16, 0x5C	; 92
      f2:	08 95       	ret
      f4:	01 91       	ld	r16, Z+
      f6:	00 c0       	rjmp	.+0      	; 0xf8 <__SREG__+0xb9>
      f8:	09 50       	subi	r16, 0x09	; 9
      fa:	09 54       	subi	r16, 0x49	; 73
      fc:	09 51       	subi	r16, 0x19	; 25
      fe:	15 00       	.word	0x0015	; ????
     100:	26 ff       	sbrs	r18, 6
     102:	7f 35       	cpi	r23, 0x5F	; 95
     104:	00 46       	sbci	r16, 0x60	; 96
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	66 03       	mulsu	r22, r22
     10a:	10 55       	subi	r17, 0x50	; 80
     10c:	fd 75       	andi	r31, 0x5D	; 93
     10e:	10 95       	com	r17
     110:	03 91       	.word	0x9103	; ????
     112:	02 55       	subi	r16, 0x52	; 82
     114:	00 66       	ori	r16, 0x60	; 96
     116:	00 00       	nop
     118:	09 52       	subi	r16, 0x29	; 41
     11a:	15 00       	.word	0x0015	; ????
     11c:	26 ff       	sbrs	r18, 6
     11e:	00 35       	cpi	r16, 0x50	; 80
     120:	00 46       	sbci	r16, 0x60	; 96
     122:	10 27       	eor	r17, r16
     124:	75 08       	sbc	r7, r5
     126:	95 01       	movw	r18, r10
     128:	91 02       	muls	r25, r17
     12a:	09 53       	subi	r16, 0x39	; 57
     12c:	15 01       	movw	r2, r10
     12e:	25 08       	sbc	r2, r5
     130:	35 01       	movw	r6, r10
     132:	45 08       	sbc	r4, r5
     134:	75 08       	sbc	r7, r5
     136:	95 01       	movw	r18, r10
     138:	91 02       	muls	r25, r17
     13a:	09 55       	subi	r16, 0x59	; 89
     13c:	a1 02       	muls	r26, r17
     13e:	05 01       	movw	r0, r10
     140:	09 30       	cpi	r16, 0x09	; 9
     142:	09 31       	cpi	r16, 0x19	; 25
     144:	15 00       	.word	0x0015	; ????
     146:	25 01       	movw	r4, r10
     148:	75 01       	movw	r14, r10
     14a:	95 02       	muls	r25, r21
     14c:	91 02       	muls	r25, r17
     14e:	c0 05       	cpc	r28, r0
     150:	0f 09       	sbc	r16, r15
     152:	56 95       	lsr	r21
     154:	01 91       	ld	r16, Z+
     156:	02 95       	swap	r16
     158:	05 91       	lpm	r16, Z+
     15a:	03 09       	sbc	r16, r3
     15c:	57 a1       	ldd	r21, Z+39	; 0x27
     15e:	02 0b       	sbc	r16, r18
     160:	01 00       	.word	0x0001	; ????
     162:	0a 00       	.word	0x000a	; ????
     164:	0b 02       	muls	r16, r27
     166:	00 0a       	sbc	r0, r16
     168:	00 66       	ori	r16, 0x60	; 96
     16a:	14 00       	.word	0x0014	; ????
     16c:	55 fe       	sbrs	r5, 5
     16e:	15 00       	.word	0x0015	; ????
     170:	26 ff       	sbrs	r18, 6
     172:	00 35       	cpi	r16, 0x50	; 80
     174:	00 47       	sbci	r16, 0x70	; 112
     176:	a0 8c       	ldd	r10, Z+24	; 0x18
     178:	00 00       	nop
     17a:	66 00       	.word	0x0066	; ????
     17c:	00 75       	andi	r16, 0x50	; 80
     17e:	08 95       	ret
     180:	02 91       	ld	r16, -Z
     182:	02 55       	subi	r16, 0x52	; 82
     184:	00 66       	ori	r16, 0x60	; 96
     186:	00 00       	nop
     188:	c0 05       	cpc	r28, r0
     18a:	0f 09       	sbc	r16, r15
     18c:	a7 66       	ori	r26, 0x67	; 103
     18e:	03 10       	cpse	r0, r3
     190:	55 fd       	sbrc	r21, 5
     192:	15 00       	.word	0x0015	; ????
     194:	26 ff       	sbrs	r18, 6
     196:	7f 35       	cpi	r23, 0x5F	; 95
     198:	00 46       	sbci	r16, 0x60	; 96
     19a:	ff 7f       	andi	r31, 0xFF	; 255
     19c:	75 10       	cpse	r7, r5
     19e:	95 01       	movw	r18, r10
     1a0:	91 02       	muls	r25, r17
     1a2:	66 00       	.word	0x0066	; ????
     1a4:	00 55       	subi	r16, 0x50	; 80
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <__SREG__+0x169>
     1a8:	05 0f       	add	r16, r21
     1aa:	09 5a       	subi	r16, 0xA9	; 169
     1ac:	a1 02       	muls	r26, r17
     1ae:	85 02       	muls	r24, r21
     1b0:	09 22       	and	r0, r25
     1b2:	15 01       	movw	r2, r10
     1b4:	25 28       	or	r2, r5
     1b6:	35 01       	movw	r6, r10
     1b8:	45 28       	or	r4, r5
     1ba:	75 08       	sbc	r7, r5
     1bc:	95 01       	movw	r18, r10
     1be:	91 02       	muls	r25, r17
     1c0:	09 5b       	subi	r16, 0xB9	; 185
     1c2:	09 5d       	subi	r16, 0xD9	; 217
     1c4:	15 00       	.word	0x0015	; ????
     1c6:	26 ff       	sbrs	r18, 6
     1c8:	00 35       	cpi	r16, 0x50	; 80
     1ca:	00 46       	sbci	r16, 0x60	; 96
     1cc:	10 27       	eor	r17, r16
     1ce:	95 02       	muls	r25, r21
     1d0:	91 02       	muls	r25, r17
     1d2:	09 5c       	subi	r16, 0xC9	; 201
     1d4:	09 5e       	subi	r16, 0xE9	; 233
     1d6:	66 03       	mulsu	r22, r22
     1d8:	10 55       	subi	r17, 0x50	; 80
     1da:	fd 26       	eor	r15, r29
     1dc:	ff 7f       	andi	r31, 0xFF	; 255
     1de:	46 ff       	sbrs	r20, 6
     1e0:	7f 75       	andi	r23, 0x5F	; 95
     1e2:	10 91 02 45 	lds	r17, 0x4502
     1e6:	00 66       	ori	r16, 0x60	; 96
     1e8:	00 00       	nop
     1ea:	55 00       	.word	0x0055	; ????
     1ec:	c0 09       	sbc	r28, r0
     1ee:	5f a1       	ldd	r21, Y+39	; 0x27
     1f0:	02 85       	ldd	r16, Z+10	; 0x0a
     1f2:	03 09       	sbc	r16, r3
     1f4:	22 15       	cp	r18, r2
     1f6:	01 25       	eor	r16, r1
     1f8:	28 35       	cpi	r18, 0x58	; 88
     1fa:	01 45       	sbci	r16, 0x51	; 81
     1fc:	28 75       	andi	r18, 0x58	; 88
     1fe:	08 95       	ret
     200:	01 91       	ld	r16, Z+
     202:	02 09       	sbc	r16, r2
     204:	23 15       	cp	r18, r3
     206:	00 25       	eor	r16, r0
     208:	01 35       	cpi	r16, 0x51	; 81
     20a:	00 45       	sbci	r16, 0x50	; 80
     20c:	01 75       	andi	r16, 0x51	; 81
     20e:	04 95       	.word	0x9504	; ????
     210:	01 91       	ld	r16, Z+
     212:	02 09       	sbc	r16, r2
     214:	58 a1       	ldd	r21, Y+32	; 0x20
     216:	02 0b       	sbc	r16, r18
     218:	01 00       	.word	0x0001	; ????
     21a:	0a 00       	.word	0x000a	; ????
     21c:	0b 02       	muls	r16, r27
     21e:	00 0a       	sbc	r0, r16
     220:	00 75       	andi	r16, 0x50	; 80
     222:	02 95       	swap	r16
     224:	02 91       	ld	r16, -Z
     226:	02 c0       	rjmp	.+4      	; 0x22c <__SREG__+0x1ed>
     228:	15 80       	ldd	r1, Z+5	; 0x05
     22a:	25 7f       	andi	r18, 0xF5	; 245
     22c:	36 f0       	brts	.+12     	; 0x23a <__SREG__+0x1fb>
     22e:	d8 46       	sbci	r29, 0x68	; 104
     230:	10 27       	eor	r17, r16
     232:	09 60       	ori	r16, 0x09	; 9
     234:	75 08       	sbc	r7, r5
     236:	95 01       	movw	r18, r10
     238:	91 02       	muls	r25, r17
     23a:	36 f0       	brts	.+12     	; 0x248 <__SREG__+0x209>
     23c:	d8 46       	sbci	r29, 0x68	; 104
     23e:	10 27       	eor	r17, r16
     240:	09 61       	ori	r16, 0x19	; 25
     242:	09 62       	ori	r16, 0x29	; 41
     244:	95 02       	muls	r25, r21
     246:	91 02       	muls	r25, r17
     248:	15 00       	.word	0x0015	; ????
     24a:	26 ff       	sbrs	r18, 6
     24c:	00 35       	cpi	r16, 0x50	; 80
     24e:	00 46       	sbci	r16, 0x60	; 96
     250:	10 27       	eor	r17, r16
     252:	09 63       	ori	r16, 0x39	; 57
     254:	09 64       	ori	r16, 0x49	; 73
     256:	75 08       	sbc	r7, r5
     258:	95 02       	muls	r25, r21
     25a:	91 02       	muls	r25, r17
     25c:	09 65       	ori	r16, 0x59	; 89
     25e:	46 10       	cpse	r4, r6
     260:	27 95       	ror	r18
     262:	01 91       	ld	r16, Z+
     264:	02 c0       	rjmp	.+4      	; 0x26a <__SREG__+0x22b>
     266:	09 6e       	ori	r16, 0xE9	; 233
     268:	a1 02       	muls	r26, r17
     26a:	85 04       	cpc	r8, r5
     26c:	09 22       	and	r0, r25
     26e:	15 01       	movw	r2, r10
     270:	25 28       	or	r2, r5
     272:	35 01       	movw	r6, r10
     274:	45 28       	or	r4, r5
     276:	75 08       	sbc	r7, r5
     278:	95 01       	movw	r18, r10
     27a:	91 02       	muls	r25, r17
     27c:	09 70       	andi	r16, 0x09	; 9
     27e:	15 00       	.word	0x0015	; ????
     280:	26 ff       	sbrs	r18, 6
     282:	00 35       	cpi	r16, 0x50	; 80
     284:	00 46       	sbci	r16, 0x60	; 96
     286:	10 27       	eor	r17, r16
     288:	75 08       	sbc	r7, r5
     28a:	95 01       	movw	r18, r10
     28c:	91 02       	muls	r25, r17
     28e:	09 6f       	ori	r16, 0xF9	; 249
     290:	15 80       	ldd	r1, Z+5	; 0x05
     292:	25 7f       	andi	r18, 0xF5	; 245
     294:	36 f0       	brts	.+12     	; 0x2a2 <__SREG__+0x263>
     296:	d8 46       	sbci	r29, 0x68	; 104
     298:	10 27       	eor	r17, r16
     29a:	95 01       	movw	r18, r10
     29c:	91 02       	muls	r25, r17
     29e:	09 71       	andi	r16, 0x19	; 25
     2a0:	66 14       	cp	r6, r6
     2a2:	00 55       	subi	r16, 0x50	; 80
     2a4:	fe 15       	cp	r31, r14
     2a6:	00 26       	eor	r0, r16
     2a8:	ff 00       	.word	0x00ff	; ????
     2aa:	35 00       	.word	0x0035	; ????
     2ac:	47 a0       	ldd	r4, Z+39	; 0x27
     2ae:	8c 00       	.word	0x008c	; ????
     2b0:	00 91 02 09 	lds	r16, 0x0902
     2b4:	72 26       	eor	r7, r18
     2b6:	ff 7f       	andi	r31, 0xFF	; 255
     2b8:	46 ff       	sbrs	r20, 6
     2ba:	7f 66       	ori	r23, 0x6F	; 111
     2bc:	03 10       	cpse	r0, r3
     2be:	55 fd       	sbrc	r21, 5
     2c0:	75 10       	cpse	r7, r5
     2c2:	95 01       	movw	r18, r10
     2c4:	91 02       	muls	r25, r17
     2c6:	66 00       	.word	0x0066	; ????
     2c8:	00 55       	subi	r16, 0x50	; 80
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <__SREG__+0x28d>
     2cc:	09 73       	andi	r16, 0x39	; 57
     2ce:	a1 02       	muls	r26, r17
     2d0:	85 05       	cpc	r24, r5
     2d2:	09 22       	and	r0, r25
     2d4:	15 01       	movw	r2, r10
     2d6:	25 28       	or	r2, r5
     2d8:	35 01       	movw	r6, r10
     2da:	45 28       	or	r4, r5
     2dc:	75 08       	sbc	r7, r5
     2de:	95 01       	movw	r18, r10
     2e0:	91 02       	muls	r25, r17
     2e2:	09 70       	andi	r16, 0x09	; 9
     2e4:	16 01       	movw	r2, r12
     2e6:	ff 26       	eor	r15, r31
     2e8:	ff 00       	.word	0x00ff	; ????
     2ea:	36 f0       	brts	.+12     	; 0x2f8 <__SREG__+0x2b9>
     2ec:	d8 46       	sbci	r29, 0x68	; 104
     2ee:	10 27       	eor	r17, r16
     2f0:	75 10       	cpse	r7, r5
     2f2:	95 01       	movw	r18, r10
     2f4:	91 02       	muls	r25, r17
     2f6:	c0 09       	sbc	r28, r0
     2f8:	74 a1       	ldd	r23, Z+36	; 0x24
     2fa:	02 85       	ldd	r16, Z+10	; 0x0a
     2fc:	06 09       	sbc	r16, r6
     2fe:	22 15       	cp	r18, r2
     300:	01 25       	eor	r16, r1
     302:	28 35       	cpi	r18, 0x58	; 88
     304:	01 45       	sbci	r16, 0x51	; 81
     306:	28 75       	andi	r18, 0x58	; 88
     308:	08 95       	ret
     30a:	01 91       	ld	r16, Z+
     30c:	02 09       	sbc	r16, r2
     30e:	75 09       	sbc	r23, r5
     310:	76 15       	cp	r23, r6
     312:	80 25       	eor	r24, r0
     314:	7f 36       	cpi	r23, 0x6F	; 111
     316:	f0 d8       	rcall	.-3616   	; 0xfffff4f8 <__eeprom_end+0xff7ef4f8>
     318:	46 10       	cpse	r4, r6
     31a:	27 75       	andi	r18, 0x57	; 87
     31c:	08 95       	ret
     31e:	02 91       	ld	r16, -Z
     320:	02 c0       	rjmp	.+4      	; 0x326 <__SREG__+0x2e7>
     322:	09 68       	ori	r16, 0x89	; 137
     324:	a1 02       	muls	r26, r17
     326:	85 07       	cpc	r24, r21
     328:	09 22       	and	r0, r25
     32a:	15 01       	movw	r2, r10
     32c:	25 28       	or	r2, r5
     32e:	35 01       	movw	r6, r10
     330:	45 28       	or	r4, r5
     332:	75 08       	sbc	r7, r5
     334:	95 01       	movw	r18, r10
     336:	91 02       	muls	r25, r17
     338:	09 6c       	ori	r16, 0xC9	; 201
     33a:	15 00       	.word	0x0015	; ????
     33c:	26 10       	cpse	r2, r6
     33e:	27 35       	cpi	r18, 0x57	; 87
     340:	00 46       	sbci	r16, 0x60	; 96
     342:	10 27       	eor	r17, r16
     344:	75 10       	cpse	r7, r5
     346:	95 01       	movw	r18, r10
     348:	91 02       	muls	r25, r17
     34a:	09 69       	ori	r16, 0x99	; 153
     34c:	15 81       	ldd	r17, Z+5	; 0x05
     34e:	25 7f       	andi	r18, 0xF5	; 245
     350:	35 00       	.word	0x0035	; ????
     352:	46 ff       	sbrs	r20, 6
     354:	00 75       	andi	r16, 0x50	; 80
     356:	08 95       	ret
     358:	0c 92       	st	X, r0
     35a:	02 01       	movw	r0, r4
     35c:	c0 09       	sbc	r28, r0
     35e:	66 a1       	ldd	r22, Z+38	; 0x26
     360:	02 85       	ldd	r16, Z+10	; 0x0a
     362:	08 05       	cpc	r16, r8
     364:	01 09       	sbc	r16, r1
     366:	30 09       	sbc	r19, r0
     368:	31 15       	cp	r19, r1
     36a:	81 25       	eor	r24, r1
     36c:	7f 35       	cpi	r23, 0x5F	; 95
     36e:	00 46       	sbci	r16, 0x60	; 96
     370:	ff 00       	.word	0x00ff	; ????
     372:	75 08       	sbc	r7, r5
     374:	95 02       	muls	r25, r21
     376:	91 02       	muls	r25, r17
     378:	c0 05       	cpc	r28, r0
     37a:	0f 09       	sbc	r16, r15
     37c:	77 a1       	ldd	r23, Z+39	; 0x27
     37e:	02 85       	ldd	r16, Z+10	; 0x0a
     380:	0a 09       	sbc	r16, r10
     382:	22 15       	cp	r18, r2
     384:	01 25       	eor	r16, r1
     386:	28 35       	cpi	r18, 0x58	; 88
     388:	01 45       	sbci	r16, 0x51	; 81
     38a:	28 75       	andi	r18, 0x58	; 88
     38c:	08 95       	ret
     38e:	01 91       	ld	r16, Z+
     390:	02 09       	sbc	r16, r2
     392:	78 a1       	ldd	r23, Y+32	; 0x20
     394:	02 09       	sbc	r16, r2
     396:	79 09       	sbc	r23, r9
     398:	7a 09       	sbc	r23, r10
     39a:	7b 15       	cp	r23, r11
     39c:	01 25       	eor	r16, r1
     39e:	03 75       	andi	r16, 0x53	; 83
     3a0:	08 95       	ret
     3a2:	01 91       	ld	r16, Z+
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <__SREG__+0x367>
     3a6:	09 7c       	andi	r16, 0xC9	; 201
     3a8:	15 00       	.word	0x0015	; ????
     3aa:	26 ff       	sbrs	r18, 6
     3ac:	00 35       	cpi	r16, 0x50	; 80
     3ae:	00 46       	sbci	r16, 0x60	; 96
     3b0:	ff 00       	.word	0x00ff	; ????
     3b2:	91 02       	muls	r25, r17
     3b4:	c0 09       	sbc	r28, r0
     3b6:	90 a1       	ldd	r25, Z+32	; 0x20
     3b8:	02 85       	ldd	r16, Z+10	; 0x0a
     3ba:	0b 09       	sbc	r16, r11
     3bc:	22 25       	eor	r18, r2
     3be:	28 15       	cp	r18, r8
     3c0:	01 35       	cpi	r16, 0x51	; 81
     3c2:	01 45       	sbci	r16, 0x51	; 81
     3c4:	28 75       	andi	r18, 0x58	; 88
     3c6:	08 95       	ret
     3c8:	01 91       	ld	r16, Z+
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <__SREG__+0x391>
     3cc:	09 96       	adiw	r24, 0x09	; 9
     3ce:	a1 02       	muls	r26, r17
     3d0:	85 0c       	add	r8, r5
     3d2:	09 97       	sbiw	r24, 0x09	; 9
     3d4:	09 98       	cbi	0x01, 1	; 1
     3d6:	09 99       	sbic	0x01, 1	; 1
     3d8:	09 9a       	sbi	0x01, 1	; 1
     3da:	09 9b       	sbis	0x01, 1	; 1
     3dc:	09 9c       	mul	r0, r9
     3de:	15 01       	movw	r2, r10
     3e0:	25 06       	cpc	r2, r21
     3e2:	75 08       	sbc	r7, r5
     3e4:	95 01       	movw	r18, r10
     3e6:	91 00       	.word	0x0091	; ????
     3e8:	c0 09       	sbc	r28, r0
     3ea:	7d a1       	ldd	r23, Y+37	; 0x25
     3ec:	02 85       	ldd	r16, Z+10	; 0x0a
     3ee:	0d 09       	sbc	r16, r13
     3f0:	7e 15       	cp	r23, r14
     3f2:	00 26       	eor	r0, r16
     3f4:	ff 00       	.word	0x00ff	; ????
     3f6:	35 00       	.word	0x0035	; ????
     3f8:	46 10       	cpse	r4, r6
     3fa:	27 75       	andi	r18, 0x57	; 87
     3fc:	08 95       	ret
     3fe:	01 91       	ld	r16, Z+
     400:	02 c0       	rjmp	.+4      	; 0x406 <__SREG__+0x3c7>
     402:	09 6b       	ori	r16, 0xB9	; 185
     404:	a1 02       	muls	r26, r17
     406:	85 0e       	add	r8, r21
     408:	09 22       	and	r0, r25
     40a:	15 01       	movw	r2, r10
     40c:	25 28       	or	r2, r5
     40e:	35 01       	movw	r6, r10
     410:	45 28       	or	r4, r5
     412:	75 08       	sbc	r7, r5
     414:	95 01       	movw	r18, r10
     416:	91 02       	muls	r25, r17
     418:	09 6d       	ori	r16, 0xD9	; 217
     41a:	15 00       	.word	0x0015	; ????
     41c:	26 ff       	sbrs	r18, 6
     41e:	00 35       	cpi	r16, 0x50	; 80
     420:	00 46       	sbci	r16, 0x60	; 96
     422:	ff 00       	.word	0x00ff	; ????
     424:	75 08       	sbc	r7, r5
     426:	95 01       	movw	r18, r10
     428:	91 02       	muls	r25, r17
     42a:	09 51       	subi	r16, 0x19	; 25
     42c:	66 03       	mulsu	r22, r22
     42e:	10 55       	subi	r17, 0x50	; 80
     430:	fd 15       	cp	r31, r13
     432:	00 26       	eor	r0, r16
     434:	ff 7f       	andi	r31, 0xFF	; 255
     436:	35 00       	.word	0x0035	; ????
     438:	46 ff       	sbrs	r20, 6
     43a:	7f 75       	andi	r23, 0x5F	; 95
     43c:	10 95       	com	r17
     43e:	01 91       	ld	r16, Z+
     440:	02 55       	subi	r16, 0x52	; 82
     442:	00 66       	ori	r16, 0x60	; 96
     444:	00 00       	nop
     446:	c0 09       	sbc	r28, r0
     448:	ab a1       	ldd	r26, Y+35	; 0x23
     44a:	02 85       	ldd	r16, Z+10	; 0x0a
     44c:	01 09       	sbc	r16, r1
     44e:	25 a1       	ldd	r18, Z+37	; 0x25
     450:	02 09       	sbc	r16, r2
     452:	26 09       	sbc	r18, r6
     454:	27 09       	sbc	r18, r7
     456:	30 09       	sbc	r19, r0
     458:	31 09       	sbc	r19, r1
     45a:	32 09       	sbc	r19, r2
     45c:	33 09       	sbc	r19, r3
     45e:	34 09       	sbc	r19, r4
     460:	40 09       	sbc	r20, r0
     462:	41 09       	sbc	r20, r1
     464:	42 09       	sbc	r20, r2
     466:	43 09       	sbc	r20, r3
     468:	28 25       	eor	r18, r8
     46a:	0c 15       	cp	r16, r12
     46c:	01 35       	cpi	r16, 0x51	; 81
     46e:	01 45       	sbci	r16, 0x51	; 81
     470:	0c 75       	andi	r16, 0x5C	; 92
     472:	08 95       	ret
     474:	01 b1       	in	r16, 0x01	; 1
     476:	00 c0       	rjmp	.+0      	; 0x478 <__SREG__+0x439>
     478:	05 01       	movw	r0, r10
     47a:	09 3b       	cpi	r16, 0xB9	; 185
     47c:	15 00       	.word	0x0015	; ????
     47e:	26 ff       	sbrs	r18, 6
     480:	01 35       	cpi	r16, 0x51	; 81
     482:	00 46       	sbci	r16, 0x60	; 96
     484:	ff 01       	movw	r30, r30
     486:	75 0a       	sbc	r7, r21
     488:	95 01       	movw	r18, r10
     48a:	b1 02       	muls	r27, r17
     48c:	75 06       	cpc	r7, r21
     48e:	b1 01       	movw	r22, r2
     490:	c0 05       	cpc	r28, r0
     492:	0f 09       	sbc	r16, r15
     494:	89 a1       	ldd	r24, Y+33	; 0x21
     496:	02 85       	ldd	r16, Z+10	; 0x0a
     498:	02 09       	sbc	r16, r2
     49a:	22 25       	eor	r18, r2
     49c:	28 15       	cp	r18, r8
     49e:	01 35       	cpi	r16, 0x51	; 81
     4a0:	01 45       	sbci	r16, 0x51	; 81
     4a2:	28 75       	andi	r18, 0x58	; 88
     4a4:	08 95       	ret
     4a6:	01 b1       	in	r16, 0x01	; 1
     4a8:	02 09       	sbc	r16, r2
     4aa:	8b a1       	ldd	r24, Y+35	; 0x23
     4ac:	02 09       	sbc	r16, r2
     4ae:	8c 09       	sbc	r24, r12
     4b0:	8d 09       	sbc	r24, r13
     4b2:	8e 25       	eor	r24, r14
     4b4:	03 15       	cp	r16, r3
     4b6:	01 35       	cpi	r16, 0x51	; 81
     4b8:	01 45       	sbci	r16, 0x51	; 81
     4ba:	03 75       	andi	r16, 0x53	; 83
     4bc:	08 95       	ret
     4be:	01 b1       	in	r16, 0x01	; 1
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__SREG__+0x483>
     4c2:	09 ac       	ldd	r0, Y+57	; 0x39
     4c4:	15 00       	.word	0x0015	; ????
     4c6:	27 ff       	sbrs	r18, 7
     4c8:	ff 00       	.word	0x00ff	; ????
     4ca:	00 35       	cpi	r16, 0x50	; 80
     4cc:	00 47       	sbci	r16, 0x70	; 112
     4ce:	ff ff       	.word	0xffff	; ????
     4d0:	00 00       	nop
     4d2:	75 10       	cpse	r7, r5
     4d4:	95 01       	movw	r18, r10
     4d6:	b1 00       	.word	0x00b1	; ????
     4d8:	c0 09       	sbc	r28, r0
     4da:	7f a1       	ldd	r23, Y+39	; 0x27
     4dc:	02 85       	ldd	r16, Z+10	; 0x0a
     4de:	03 09       	sbc	r16, r3
     4e0:	80 75       	andi	r24, 0x50	; 80
     4e2:	10 95       	com	r17
     4e4:	01 15       	cp	r16, r1
     4e6:	00 35       	cpi	r16, 0x50	; 80
     4e8:	00 27       	eor	r16, r16
     4ea:	ff ff       	.word	0xffff	; ????
     4ec:	00 00       	nop
     4ee:	47 ff       	sbrs	r20, 7
     4f0:	ff 00       	.word	0x00ff	; ????
     4f2:	00 b1       	in	r16, 0x00	; 0
     4f4:	02 09       	sbc	r16, r2
     4f6:	83 26       	eor	r8, r19
     4f8:	ff 00       	.word	0x00ff	; ????
     4fa:	46 ff       	sbrs	r20, 6
     4fc:	00 75       	andi	r16, 0x50	; 80
     4fe:	08 95       	ret
     500:	01 b1       	in	r16, 0x01	; 1
     502:	02 09       	sbc	r16, r2
     504:	a9 09       	sbc	r26, r9
     506:	aa 75       	andi	r26, 0x5A	; 90
     508:	01 95       	neg	r16
     50a:	02 15       	cp	r16, r2
     50c:	00 25       	eor	r16, r0
     50e:	01 35       	cpi	r16, 0x51	; 81
     510:	00 45       	sbci	r16, 0x50	; 80
     512:	01 b1       	in	r16, 0x01	; 1
     514:	02 75       	andi	r16, 0x52	; 82
     516:	06 95       	lsr	r16
     518:	01 b1       	in	r16, 0x01	; 1
     51a:	03 c0       	rjmp	.+6      	; 0x522 <usbDescriptorConfiguration+0x5>
     51c:	c0 09       	sbc	r28, r0

0000051d <usbDescriptorConfiguration>:
     51d:	09 02 22 00 01 01 00 80 fa 09 04 00 00 01 03 00     ..".............
     52d:	00 00 09 21 01 01 00 01 22 e9 04 07 05 81 03 08     ...!....".......
     53d:	00 20                                               . 

0000053f <usbDescriptorDevice>:
     53f:	12 01 10 01 00 00 00 08 c0 16 db 05 00 01 01 02     ................
     54f:	00 01                                               ..

00000551 <usbDescriptorStringDevice>:
     551:	0e 03 50 00 53 00 58 00 55 00 53 00 42 00           ..P.S.X.U.S.B.

0000055f <usbDescriptorStringVendor>:
     55f:	0e 03 50 00 69 00 74 00 6d 00 61 00 6e 00           ..P.i.t.m.a.n.

0000056d <usbDescriptorString0>:
     56d:	04 03 09 04 00                                      .....

00000572 <__ctors_end>:
     572:	11 24       	eor	r1, r1
     574:	1f be       	out	0x3f, r1	; 63
     576:	cf ef       	ldi	r28, 0xFF	; 255
     578:	d4 e0       	ldi	r29, 0x04	; 4
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	cd bf       	out	0x3d, r28	; 61

0000057e <__do_copy_data>:
     57e:	11 e0       	ldi	r17, 0x01	; 1
     580:	a0 e0       	ldi	r26, 0x00	; 0
     582:	b1 e0       	ldi	r27, 0x01	; 1
     584:	e0 ed       	ldi	r30, 0xD0	; 208
     586:	f3 e1       	ldi	r31, 0x13	; 19
     588:	02 c0       	rjmp	.+4      	; 0x58e <__do_copy_data+0x10>
     58a:	05 90       	lpm	r0, Z+
     58c:	0d 92       	st	X+, r0
     58e:	a2 31       	cpi	r26, 0x12	; 18
     590:	b1 07       	cpc	r27, r17
     592:	d9 f7       	brne	.-10     	; 0x58a <__do_copy_data+0xc>

00000594 <__do_clear_bss>:
     594:	21 e0       	ldi	r18, 0x01	; 1
     596:	a2 e1       	ldi	r26, 0x12	; 18
     598:	b1 e0       	ldi	r27, 0x01	; 1
     59a:	01 c0       	rjmp	.+2      	; 0x59e <.do_clear_bss_start>

0000059c <.do_clear_bss_loop>:
     59c:	1d 92       	st	X+, r1

0000059e <.do_clear_bss_start>:
     59e:	a5 36       	cpi	r26, 0x65	; 101
     5a0:	b2 07       	cpc	r27, r18
     5a2:	e1 f7       	brne	.-8      	; 0x59c <.do_clear_bss_loop>
     5a4:	85 d6       	rcall	.+3338   	; 0x12b0 <main>
     5a6:	12 c7       	rjmp	.+3620   	; 0x13cc <_exit>

000005a8 <__bad_interrupt>:
     5a8:	2b cd       	rjmp	.-1450   	; 0x0 <__vectors>

000005aa <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
     5aa:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     5ac:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     5b2:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     5b4:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
     5b6:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
     5b8:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
     5ba:	09 c0       	rjmp	.+18     	; 0x5ce <usbCrcLoopEntry>

000005bc <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
     5bc:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
     5be:	82 27       	eor	r24, r18

000005c0 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
     5c0:	97 95       	ror	r25
    ror     resCrcL
     5c2:	87 95       	ror	r24
    brcs    usbCrcNoXor
     5c4:	10 f0       	brcs	.+4      	; 0x5ca <usbCrcNoXor>
    eor     resCrcL, polyL
     5c6:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     5c8:	95 27       	eor	r25, r21

000005ca <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
     5ca:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
     5cc:	c8 f3       	brcs	.-14     	; 0x5c0 <usbCrcBitLoop>

000005ce <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
     5ce:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
     5d0:	a8 f3       	brcs	.-22     	; 0x5bc <usbCrcByteLoop>

000005d2 <usbCrcReady>:
usbCrcReady:
    ret
     5d2:	08 95       	ret

000005d4 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     5d4:	ea df       	rcall	.-44     	; 0x5aa <usbCrc16>
    st      ptr+, resCrcL
     5d6:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     5d8:	9d 93       	st	X+, r25
    ret
     5da:	08 95       	ret

000005dc <__vector_1>:
; bitcnt is used to determine when a stuff bit is due
; cnt holds the number of bytes left in the receive buffer

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-28] push only what is necessary to sync with edge ASAP
     5dc:	cf 93       	push	r28
    in      YL, SREG            ;[-26]
     5de:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-25]
     5e0:	cf 93       	push	r28
    push    YH                  ;[-23]
     5e2:	df 93       	push	r29

000005e4 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
     5e4:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
     5e6:	4c 9b       	sbis	0x09, 4	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
     5e8:	e9 f7       	brne	.-6      	; 0x5e4 <waitForJ>

000005ea <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-19]
     5ea:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK              ;[-18]
     5ec:	11 c0       	rjmp	.+34     	; 0x610 <foundK>
    sbis    USBIN, USBMINUS
     5ee:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
     5f0:	0f c0       	rjmp	.+30     	; 0x610 <foundK>
    sbis    USBIN, USBMINUS
     5f2:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
     5f4:	0d c0       	rjmp	.+26     	; 0x610 <foundK>
    sbis    USBIN, USBMINUS
     5f6:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
     5f8:	0b c0       	rjmp	.+22     	; 0x610 <foundK>
    sbis    USBIN, USBMINUS
     5fa:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <foundK>
    sbis    USBIN, USBMINUS
     5fe:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
     600:	07 c0       	rjmp	.+14     	; 0x610 <foundK>
    sbis    USBIN, USBMINUS
     602:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
     604:	05 c0       	rjmp	.+10     	; 0x610 <foundK>
    sbis    USBIN, USBMINUS
     606:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
     608:	03 c0       	rjmp	.+6      	; 0x610 <foundK>
    sbis    USBIN, USBMINUS
     60a:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
     60c:	01 c0       	rjmp	.+2      	; 0x610 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
     60e:	83 c0       	rjmp	.+262    	; 0x716 <sofError>

00000610 <foundK>:
foundK:                         ;[-16]
;{3, 5} after falling D- edge, average delay: 4 cycles
;bit0 should be at 34 for center sampling. Currently at 4 so 30 cylces till bit 0 sample
;use 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-16]
     610:	6f 93       	push	r22
;   [---]                       ;[-15]
    lds     YL, usbInputBufOffset;[-14]
     612:	c0 91 3e 01 	lds	r28, 0x013E
;   [---]                       ;[-13]
    clr     YH                  ;[-12]
     616:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-11] [rx loop init]
     618:	cb 5b       	subi	r28, 0xBB	; 187
    sbci    YH, hi8(-(usbRxBuf));[-10] [rx loop init]
     61a:	de 4f       	sbci	r29, 0xFE	; 254
    push    shift               ;[-9]
     61c:	2f 93       	push	r18
;   [---]                       ;[-8]
    ldi     shift,0x40          ;[-7] set msb to "1" so processing bit7 can be detected
     61e:	20 e4       	ldi	r18, 0x40	; 64
    nop2                        ;[-6]
     620:	00 c0       	rjmp	.+0      	; 0x622 <foundK+0x12>
;   [---]                       ;[-5]
    ldi     bitcnt, 5           ;[-4] [rx loop init]
     622:	65 e0       	ldi	r22, 0x05	; 5
    sbis    USBIN, USBMINUS     ;[-3] we want two bits K (sample 3 cycles too early)
     624:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    haveTwoBitsK        ;[-2]
     626:	03 c0       	rjmp	.+6      	; 0x62e <haveTwoBitsK>
    pop     shift               ;[-1] undo the push from before
     628:	2f 91       	pop	r18
    pop     bitcnt              ;[1] 
     62a:	6f 91       	pop	r22
    rjmp    waitForK            ;[3] this was not the end of sync, retry
     62c:	de cf       	rjmp	.-68     	; 0x5ea <waitForK>

0000062e <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1                  ;[0]
     62e:	0f 93       	push	r16
    push    x2                  ;[2]
     630:	1f 93       	push	r17
    push    x3                  ;[4] (leap2)
     632:	4f 93       	push	r20
    ldi     leap2, 0x55         ;[6] add leap cycle on 2nd,5th,8th,... stuff bit
     634:	45 e5       	ldi	r20, 0x55	; 85
    push    x4                  ;[7] == leap
     636:	5f 93       	push	r21
    ldi     leap, 0x55          ;[9] skip leap cycle on 2nd,5th,8th,... byte received
     638:	55 e5       	ldi	r21, 0x55	; 85
    push    cnt                 ;[10]
     63a:	3f 93       	push	r19
    ldi     cnt, USB_BUFSIZE    ;[12] [rx loop init]
     63c:	3b e0       	ldi	r19, 0x0B	; 11
    ldi     x2, 1<<USBPLUS      ;[13] current line state is K state. D+=="1", D-=="0"
     63e:	14 e0       	ldi	r17, 0x04	; 4

00000640 <bit0>:
bit0:       
    in      x1, USBIN           ;[0] sample line state
     640:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     642:	04 71       	andi	r16, 0x14	; 20
    rjmp    handleBit           ;[2] make bit0 14 cycles long
     644:	2e c0       	rjmp	.+92     	; 0x6a2 <handleBit>

00000646 <b6checkUnstuff>:
;----------------------------------------------------------------------------
; Process bit7. However, bit 6 still may need unstuffing.
;----------------------------------------------------------------------------

b6checkUnstuff:
    dec     bitcnt              ;[9]
     646:	6a 95       	dec	r22
    breq    unstuff6            ;[10]
     648:	c9 f0       	breq	.+50     	; 0x67c <unstuff6>

0000064a <bit7>:
bit7:
    subi    cnt, 1              ;[11] cannot use dec becaus it does not affect the carry flag
     64a:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow            ;[12] Too many bytes received. Ignore packet
     64c:	d8 f1       	brcs	.+118    	; 0x6c4 <overflow>
    in      x1, USBIN           ;[0] sample line state
     64e:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     650:	04 71       	andi	r16, 0x14	; 20
    cpse    x1, x2              ;[2] when previous line state equals current line state, handle "1"
     652:	01 13       	cpse	r16, r17
    rjmp    b7handle0           ;[3] when line state differs, handle "0"
     654:	0b c0       	rjmp	.+22     	; 0x66c <b7handle0>
    sec                         ;[4]
     656:	08 94       	sec
    ror     shift               ;[5] shift "1" into the data
     658:	27 95       	ror	r18
    st      y+, shift           ;[6] store the data into the buffer
     65a:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[7] reset data for receiving the next byte
     65c:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[9] trick to introduce a leap cycle every 3 bytes
     65e:	55 55       	subi	r21, 0x55	; 85
    brcc    nextInst            ;[10 or 11] it will fail after 85 bytes. However low speed can only receive 11
     660:	00 f4       	brcc	.+0      	; 0x662 <bit7+0x18>
    dec     bitcnt              ;[11 or 12]
     662:	6a 95       	dec	r22
    brne    bit0                ;[12 or 13]
     664:	69 f7       	brne	.-38     	; 0x640 <bit0>
    ldi     x1, 1               ;[13 or 14] unstuffing bit 7
     666:	01 e0       	ldi	r16, 0x01	; 1
    in      bitcnt, USBIN       ;[0] sample stuff bit
     668:	69 b1       	in	r22, 0x09	; 9
    rjmp    unstuff             ;[1]
     66a:	0b c0       	rjmp	.+22     	; 0x682 <unstuff>

0000066c <b7handle0>:

b7handle0:
    mov     x2,x1               ;[5] Set x2 to current line state
     66c:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[6]
     66e:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[7] shift "0" into the data
     670:	26 95       	lsr	r18
    st      y+, shift           ;[8] store data into the buffer
     672:	29 93       	st	Y+, r18
    ldi     shift, 0x40         ;[10] reset data for receiving the next byte
     674:	20 e4       	ldi	r18, 0x40	; 64
    subi    leap, 0x55          ;[11] trick to introduce a leap cycle every 3 bytes
     676:	55 55       	subi	r21, 0x55	; 85
    brcs    bit0                ;[12] it will fail after 85 bytes. However low speed can only receive 11
     678:	18 f3       	brcs	.-58     	; 0x640 <bit0>
    rjmp    bit0                ;[13]
     67a:	e2 cf       	rjmp	.-60     	; 0x640 <bit0>

0000067c <unstuff6>:
; Handle unstuff
; x1==0xFF indicate unstuffing bit6
;----------------------------------------------------------------------------

unstuff6:
    ldi     x1,0xFF             ;[12] indicate unstuffing bit 6
     67c:	0f ef       	ldi	r16, 0xFF	; 255
    in      bitcnt, USBIN       ;[0]  sample stuff bit
     67e:	69 b1       	in	r22, 0x09	; 9
	...

00000682 <unstuff>:
    nop                         ;[1]  fix timing
unstuff:                        ;b0-5  b6   b7
    mov     x2,bitcnt           ;[3]  [2]  [3]  Set x2 to match line state
     682:	16 2f       	mov	r17, r22
    subi    leap2, 0x55         ;[4]  [3]  [4]  delay loop
     684:	45 55       	subi	r20, 0x55	; 85
    brcs    nextInst            ;[5]  [4]  [5]  add one cycle every three stuff bits
     686:	00 f0       	brcs	.+0      	; 0x688 <unstuff+0x6>
    sbci    leap2,0             ;[6]  [5]  [6]
     688:	40 40       	sbci	r20, 0x00	; 0
    ldi     bitcnt,6            ;[7]  [6]  [7]  reset bit stuff counter
     68a:	66 e0       	ldi	r22, 0x06	; 6
    andi    x2, USBMASK         ;[8]  [7]  [8] only keep D+ and D-
     68c:	14 71       	andi	r17, 0x14	; 20
    cpi     x1,0                ;[9]  [8]  [9]
     68e:	00 30       	cpi	r16, 0x00	; 0
    brmi    bit7                ;[10] [9]  [10] finished unstuffing bit6 When x1<0
     690:	e2 f2       	brmi	.-72     	; 0x64a <bit7>
    breq    bitloop             ;[11] ---  [11] finished unstuffing bit0-5 when x1=0
     692:	21 f0       	breq	.+8      	; 0x69c <bitloop>
    nop                         ;---  ---  [12]
     694:	00 00       	nop
    in      x1, USBIN           ;---  ---  [0] sample line state for bit0
     696:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK         ;---  ---  [1] filter only D+ and D- bits
     698:	04 71       	andi	r16, 0x14	; 20
    rjmp    handleBit           ;---  ---  [2] make bit0 14 cycles long
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <handleBit>

0000069c <bitloop>:

;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------
bitloop:
    in      x1, USBIN           ;[0] sample line state
     69c:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK         ;[1] filter only D+ and D- bits
     69e:	04 71       	andi	r16, 0x14	; 20
    breq    se0                 ;[2] both lines are low so handle se0
     6a0:	a9 f0       	breq	.+42     	; 0x6cc <se0>

000006a2 <handleBit>:
handleBit:
    cpse    x1, x2              ;[3] when previous line state equals current line state, handle "1"
     6a2:	01 13       	cpse	r16, r17
    rjmp    handle0             ;[4] when line state differs, handle "0"
     6a4:	09 c0       	rjmp	.+18     	; 0x6b8 <handle0>
    sec                         ;[5]
     6a6:	08 94       	sec
    ror     shift               ;[6] shift "1" into the data
     6a8:	27 95       	ror	r18
    brcs    b6checkUnstuff      ;[7] When after shift C is set, next bit is bit7
     6aa:	68 f2       	brcs	.-102    	; 0x646 <b6checkUnstuff>
    nop2                        ;[8]
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <handleBit+0xc>
    dec     bitcnt              ;[10]
     6ae:	6a 95       	dec	r22
    brne    bitloop             ;[11]
     6b0:	a9 f7       	brne	.-22     	; 0x69c <bitloop>
    ldi     x1,0                ;[12] indicate unstuff for bit other than bit6 or bit7
     6b2:	00 e0       	ldi	r16, 0x00	; 0
    in      bitcnt, USBIN       ;[0] sample stuff bit
     6b4:	69 b1       	in	r22, 0x09	; 9
    rjmp    unstuff             ;[1]
     6b6:	e5 cf       	rjmp	.-54     	; 0x682 <unstuff>

000006b8 <handle0>:

handle0:
    mov     x2, x1              ;[6] Set x2 to current line state
     6b8:	10 2f       	mov	r17, r16
    ldi     bitcnt, 6           ;[7] reset unstuff counter. 
     6ba:	66 e0       	ldi	r22, 0x06	; 6
    lsr     shift               ;[8] shift "0" into the data
     6bc:	26 95       	lsr	r18
    brcs    bit7                ;[9] When after shift C is set, next bit is bit7
     6be:	28 f2       	brcs	.-118    	; 0x64a <bit7>
    nop                         ;[10]
     6c0:	00 00       	nop
    rjmp    bitloop             ;[11] 
     6c2:	ec cf       	rjmp	.-40     	; 0x69c <bitloop>

000006c4 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
     6c4:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
     6c6:	1c bb       	out	0x1c, r17	; 28

000006c8 <ignorePacket>:
ignorePacket:
    clr     token
     6c8:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
     6ca:	19 c0       	rjmp	.+50     	; 0x6fe <handleSetupOrOut>

000006cc <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
     6cc:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
     6ce:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
     6d0:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
     6d2:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
     6d4:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
     6d6:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
     6d8:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
     6da:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
     6dc:	09 f1       	breq	.+66     	; 0x720 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
     6de:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
     6e0:	f9 f0       	breq	.+62     	; 0x720 <handleData>
    lds     shift, usbDeviceAddr;[17]
     6e2:	20 91 3c 01 	lds	r18, 0x013C
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
     6e6:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
     6e8:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
     6ea:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
     6ec:	ed cf       	rjmp	.-38     	; 0x6c8 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
     6ee:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
     6f0:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
     6f2:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
     6f4:	51 f1       	breq	.+84     	; 0x74a <handleIn>
    cpi     token, USBPID_SETUP ;[29]
     6f6:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
     6f8:	11 f0       	breq	.+4      	; 0x6fe <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
     6fa:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
     6fc:	29 f7       	brne	.-54     	; 0x6c8 <ignorePacket>

000006fe <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
     6fe:	00 93 43 01 	sts	0x0143, r16

00000702 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
     702:	3f 91       	pop	r19
     704:	5f 91       	pop	r21
     706:	4f 91       	pop	r20
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	2f 91       	pop	r18
     70e:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
     710:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
     712:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
     714:	67 cf       	rjmp	.-306    	; 0x5e4 <waitForJ>

00000716 <sofError>:
sofError:
    POP_RETI                    ;macro call
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	cf bf       	out	0x3f, r28	; 63
     71c:	cf 91       	pop	r28
    reti
     71e:	18 95       	reti

00000720 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
     720:	20 91 43 01 	lds	r18, 0x0143
    tst     shift               ;[20]
     724:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
     726:	69 f3       	breq	.-38     	; 0x702 <doReturn>
    lds     x2, usbRxLen        ;[22]
     728:	10 91 41 01 	lds	r17, 0x0141
    tst     x2                  ;[24]
     72c:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
     72e:	81 f5       	brne	.+96     	; 0x790 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
     730:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
     732:	82 f1       	brmi	.+96     	; 0x794 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
     734:	30 93 41 01 	sts	0x0141, r19
    sts     usbRxToken, shift   ;[30]
     738:	20 93 3d 01 	sts	0x013D, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
     73c:	10 91 3e 01 	lds	r17, 0x013E
    ldi     cnt, USB_BUFSIZE    ;[34]
     740:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
     742:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
     744:	30 93 3e 01 	sts	0x013E, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
     748:	25 c0       	rjmp	.+74     	; 0x794 <sendAckAndReti>

0000074a <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
     74a:	00 91 41 01 	lds	r16, 0x0141
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
     74e:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
     750:	fc f4       	brge	.+62     	; 0x790 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
     752:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
     754:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
     756:	49 f4       	brne	.+18     	; 0x76a <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
     758:	30 91 02 01 	lds	r19, 0x0102
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
     75c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
     75e:	1b c0       	rjmp	.+54     	; 0x796 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
     760:	00 93 02 01 	sts	0x0102, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
     764:	c5 e2       	ldi	r28, 0x25	; 37
    ldi     YH, hi8(usbTxBuf)   ;[44]
     766:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
     768:	1a c0       	rjmp	.+52     	; 0x79e <usbSendAndReti>

0000076a <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
     76a:	30 91 30 01 	lds	r19, 0x0130
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
     76e:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
     770:	12 c0       	rjmp	.+36     	; 0x796 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
     772:	00 93 30 01 	sts	0x0130, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
     776:	c1 e3       	ldi	r28, 0x31	; 49
    ldi     YH, hi8(usbTxBuf1)  ;[47]
     778:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
     77a:	11 c0       	rjmp	.+34     	; 0x79e <usbSendAndReti>

0000077c <bitstuffN>:
; Spec allows 7.5 bit times from EOP to SOP for replies
; 7.5 bit times is 100 cycles. This implementation arrives a bit later at se0
; then specified in the include file but there is plenty of time

bitstuffN:
    eor     x1, x4          ;[8]
     77c:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[9]
     77e:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[10]
     780:	00 c0       	rjmp	.+0      	; 0x782 <bitstuffN+0x6>
    out     USBOUT, x1      ;[12] <-- out
     782:	0b b9       	out	0x0b, r16	; 11
    rjmp    didStuffN       ;[0]
     784:	19 c0       	rjmp	.+50     	; 0x7b8 <didStuffN>

00000786 <bitstuff7>:
    
bitstuff7:
    eor     x1, x4          ;[6]
     786:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[7] Carry is zero due to brcc
     788:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[8] compensate for ror shift at branch destination
     78a:	22 1f       	adc	r18, r18
    nop2                    ;[9]
     78c:	00 c0       	rjmp	.+0      	; 0x78e <bitstuff7+0x8>
    rjmp    didStuff7       ;[11]
     78e:	1d c0       	rjmp	.+58     	; 0x7ca <didStuff7>

00000790 <sendNakAndReti>:

sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
     790:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
     792:	02 c0       	rjmp	.+4      	; 0x798 <sendX3AndReti>

00000794 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
     794:	32 ed       	ldi	r19, 0xD2	; 210

00000796 <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
     796:	43 2f       	mov	r20, r19

00000798 <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
     798:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
     79a:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
     79c:	32 e0       	ldi	r19, 0x02	; 2

0000079e <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
     79e:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK     ;[-11]
     7a0:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
     7a2:	5c 9a       	sbi	0x0b, 4	; 11
    in      x1, USBOUT      ;[-8] port mirror for tx loop
     7a4:	0b b1       	in	r16, 0x0b	; 11
    out     USBDDR, x2      ;[-7] <- acquire bus
     7a6:	1a b9       	out	0x0a, r17	; 10
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
     7a8:	54 e1       	ldi	r21, 0x14	; 20
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
     7aa:	20 e8       	ldi	r18, 0x80	; 128

000007ac <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x49    ;[-4]        [10] binary 01001001
     7ac:	69 e4       	ldi	r22, 0x49	; 73

000007ae <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [10]   [11]
     7ae:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [11]   [12]
     7b0:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [12]   [13]   <-- out N
     7b2:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0]  [13]   [14]
     7b4:	27 95       	ror	r18
    ror     x2              ;[1]
     7b6:	17 95       	ror	r17

000007b8 <didStuffN>:
didStuffN:
    nop2                    ;[2]
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <didStuffN+0x2>
    nop                     ;[4]
     7ba:	00 00       	nop
    cpi     x2, 0xfc        ;[5]
     7bc:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[6]
     7be:	f0 f6       	brcc	.-68     	; 0x77c <bitstuffN>
    lsr     bitcnt          ;[7]
     7c0:	66 95       	lsr	r22
    brcc    txBitLoop       ;[8]
     7c2:	a8 f7       	brcc	.-22     	; 0x7ae <txBitLoop>
    brne    txBitLoop       ;[9]
     7c4:	a1 f7       	brne	.-24     	; 0x7ae <txBitLoop>

    sbrs    shift, 0        ;[10]
     7c6:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[11]
     7c8:	05 27       	eor	r16, r21

000007ca <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[-1] [13] <-- out 7
     7ca:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [14]
     7cc:	27 95       	ror	r18
    ror     x2              ;[1]
     7ce:	17 95       	ror	r17
    nop                     ;[2]
     7d0:	00 00       	nop
    cpi     x2, 0xfc        ;[3]
     7d2:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[4]
     7d4:	c0 f6       	brcc	.-80     	; 0x786 <bitstuff7>
    ld      shift, y+       ;[5]
     7d6:	29 91       	ld	r18, Y+
    dec     cnt             ;[7]
     7d8:	3a 95       	dec	r19
    brne    txByteLoop      ;[8]
     7da:	41 f7       	brne	.-48     	; 0x7ac <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[9] prepare SE0 [spec says EOP may be 25 to 30 cycles]
     7dc:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[10]
     7de:	10 91 42 01 	lds	r17, 0x0142
    lsl     x2              ;[12] we compare with left shifted address
     7e2:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[13] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
     7e4:	0b b9       	out	0x0b, r16	; 11
    subi    YL, 20 + 2      ;[0] Only assign address on data packets, not ACK/NAK in x3
     7e6:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[1]
     7e8:	d0 40       	sbci	r29, 0x00	; 0
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[2]
     7ea:	11 f0       	breq	.+4      	; 0x7f0 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
     7ec:	10 93 3c 01 	sts	0x013C, r17

000007f0 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
     7f0:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[5]
     7f2:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[6]
     7f4:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR      ;[7]
     7f6:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK     ;[8] set both pins to input
     7f8:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1          ;[9]
     7fa:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
     7fc:	4b 7e       	andi	r20, 0xEB	; 235
    ldi     x4, 5           ;[11]
     7fe:	55 e0       	ldi	r21, 0x05	; 5

00000800 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21] [24]
     800:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22] [25]
     802:	f1 f7       	brne	.-4      	; 0x800 <se0Delay>
    out     USBOUT, x1      ;[26] <-- out J (idle) -- end of SE0 (EOP signal)
     804:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2      ;[27] <-- release bus now
     806:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3      ;[28] <-- ensure no pull-up resistors are active
     808:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
     80a:	7b cf       	rjmp	.-266    	; 0x702 <doReturn>

0000080c <psxInit>:
     80c:	2a 98       	cbi	0x05, 2	; 5
     80e:	87 e8       	ldi	r24, 0x87	; 135
     810:	93 e1       	ldi	r25, 0x13	; 19
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <psxInit+0x6>
     816:	00 c0       	rjmp	.+0      	; 0x818 <psxInit+0xc>
     818:	00 00       	nop
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	15 d3       	rcall	.+1578   	; 0xe48 <spi_mSend>
     81e:	83 ef       	ldi	r24, 0xF3	; 243
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <psxInit+0x16>
     826:	00 c0       	rjmp	.+0      	; 0x828 <psxInit+0x1c>
     828:	00 00       	nop
     82a:	83 e4       	ldi	r24, 0x43	; 67
     82c:	0d d3       	rcall	.+1562   	; 0xe48 <spi_mSend>
     82e:	83 ef       	ldi	r24, 0xF3	; 243
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <psxInit+0x26>
     836:	00 c0       	rjmp	.+0      	; 0x838 <psxInit+0x2c>
     838:	00 00       	nop
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	05 d3       	rcall	.+1546   	; 0xe48 <spi_mSend>
     83e:	83 ef       	ldi	r24, 0xF3	; 243
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <psxInit+0x36>
     846:	00 c0       	rjmp	.+0      	; 0x848 <psxInit+0x3c>
     848:	00 00       	nop
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	fd d2       	rcall	.+1530   	; 0xe48 <spi_mSend>
     84e:	83 ef       	ldi	r24, 0xF3	; 243
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <psxInit+0x46>
     856:	00 c0       	rjmp	.+0      	; 0x858 <psxInit+0x4c>
     858:	00 00       	nop
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	f5 d2       	rcall	.+1514   	; 0xe48 <spi_mSend>
     85e:	83 ef       	ldi	r24, 0xF3	; 243
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <psxInit+0x56>
     866:	00 c0       	rjmp	.+0      	; 0x868 <psxInit+0x5c>
     868:	00 00       	nop
     86a:	2a 9a       	sbi	0x05, 2	; 5
     86c:	8f e3       	ldi	r24, 0x3F	; 63
     86e:	9c e9       	ldi	r25, 0x9C	; 156
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <psxInit+0x64>
     874:	00 c0       	rjmp	.+0      	; 0x876 <psxInit+0x6a>
     876:	00 00       	nop
     878:	2a 98       	cbi	0x05, 2	; 5
     87a:	87 e8       	ldi	r24, 0x87	; 135
     87c:	93 e1       	ldi	r25, 0x13	; 19
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <psxInit+0x72>
     882:	00 c0       	rjmp	.+0      	; 0x884 <psxInit+0x78>
     884:	00 00       	nop
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	df d2       	rcall	.+1470   	; 0xe48 <spi_mSend>
     88a:	83 ef       	ldi	r24, 0xF3	; 243
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <psxInit+0x82>
     892:	00 c0       	rjmp	.+0      	; 0x894 <psxInit+0x88>
     894:	00 00       	nop
     896:	84 e4       	ldi	r24, 0x44	; 68
     898:	d7 d2       	rcall	.+1454   	; 0xe48 <spi_mSend>
     89a:	83 ef       	ldi	r24, 0xF3	; 243
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <psxInit+0x92>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <psxInit+0x98>
     8a4:	00 00       	nop
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	cf d2       	rcall	.+1438   	; 0xe48 <spi_mSend>
     8aa:	83 ef       	ldi	r24, 0xF3	; 243
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <psxInit+0xa2>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <psxInit+0xa8>
     8b4:	00 00       	nop
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	c7 d2       	rcall	.+1422   	; 0xe48 <spi_mSend>
     8ba:	83 ef       	ldi	r24, 0xF3	; 243
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <psxInit+0xb2>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <psxInit+0xb8>
     8c4:	00 00       	nop
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	bf d2       	rcall	.+1406   	; 0xe48 <spi_mSend>
     8ca:	83 ef       	ldi	r24, 0xF3	; 243
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <psxInit+0xc2>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <psxInit+0xc8>
     8d4:	00 00       	nop
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	b7 d2       	rcall	.+1390   	; 0xe48 <spi_mSend>
     8da:	83 ef       	ldi	r24, 0xF3	; 243
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <psxInit+0xd2>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <psxInit+0xd8>
     8e4:	00 00       	nop
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	af d2       	rcall	.+1374   	; 0xe48 <spi_mSend>
     8ea:	83 ef       	ldi	r24, 0xF3	; 243
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <psxInit+0xe2>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <psxInit+0xe8>
     8f4:	00 00       	nop
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	a7 d2       	rcall	.+1358   	; 0xe48 <spi_mSend>
     8fa:	83 ef       	ldi	r24, 0xF3	; 243
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <psxInit+0xf2>
     902:	00 c0       	rjmp	.+0      	; 0x904 <psxInit+0xf8>
     904:	00 00       	nop
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	9f d2       	rcall	.+1342   	; 0xe48 <spi_mSend>
     90a:	83 ef       	ldi	r24, 0xF3	; 243
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <psxInit+0x102>
     912:	00 c0       	rjmp	.+0      	; 0x914 <psxInit+0x108>
     914:	00 00       	nop
     916:	2a 9a       	sbi	0x05, 2	; 5
     918:	8f e3       	ldi	r24, 0x3F	; 63
     91a:	9c e9       	ldi	r25, 0x9C	; 156
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	f1 f7       	brne	.-4      	; 0x91c <psxInit+0x110>
     920:	00 c0       	rjmp	.+0      	; 0x922 <psxInit+0x116>
     922:	00 00       	nop
     924:	2a 98       	cbi	0x05, 2	; 5
     926:	87 e8       	ldi	r24, 0x87	; 135
     928:	93 e1       	ldi	r25, 0x13	; 19
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	f1 f7       	brne	.-4      	; 0x92a <psxInit+0x11e>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <psxInit+0x124>
     930:	00 00       	nop
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	89 d2       	rcall	.+1298   	; 0xe48 <spi_mSend>
     936:	83 ef       	ldi	r24, 0xF3	; 243
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <psxInit+0x12e>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <psxInit+0x134>
     940:	00 00       	nop
     942:	8d e4       	ldi	r24, 0x4D	; 77
     944:	81 d2       	rcall	.+1282   	; 0xe48 <spi_mSend>
     946:	83 ef       	ldi	r24, 0xF3	; 243
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <psxInit+0x13e>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <psxInit+0x144>
     950:	00 00       	nop
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	79 d2       	rcall	.+1266   	; 0xe48 <spi_mSend>
     956:	83 ef       	ldi	r24, 0xF3	; 243
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	f1 f7       	brne	.-4      	; 0x95a <psxInit+0x14e>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <psxInit+0x154>
     960:	00 00       	nop
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	71 d2       	rcall	.+1250   	; 0xe48 <spi_mSend>
     966:	83 ef       	ldi	r24, 0xF3	; 243
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <psxInit+0x15e>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <psxInit+0x164>
     970:	00 00       	nop
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	69 d2       	rcall	.+1234   	; 0xe48 <spi_mSend>
     976:	83 ef       	ldi	r24, 0xF3	; 243
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <psxInit+0x16e>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <psxInit+0x174>
     980:	00 00       	nop
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	61 d2       	rcall	.+1218   	; 0xe48 <spi_mSend>
     986:	83 ef       	ldi	r24, 0xF3	; 243
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <psxInit+0x17e>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <psxInit+0x184>
     990:	00 00       	nop
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	59 d2       	rcall	.+1202   	; 0xe48 <spi_mSend>
     996:	83 ef       	ldi	r24, 0xF3	; 243
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	f1 f7       	brne	.-4      	; 0x99a <psxInit+0x18e>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <psxInit+0x194>
     9a0:	00 00       	nop
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	51 d2       	rcall	.+1186   	; 0xe48 <spi_mSend>
     9a6:	83 ef       	ldi	r24, 0xF3	; 243
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <psxInit+0x19e>
     9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <psxInit+0x1a4>
     9b0:	00 00       	nop
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	49 d2       	rcall	.+1170   	; 0xe48 <spi_mSend>
     9b6:	83 ef       	ldi	r24, 0xF3	; 243
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <psxInit+0x1ae>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <psxInit+0x1b4>
     9c0:	00 00       	nop
     9c2:	2a 9a       	sbi	0x05, 2	; 5
     9c4:	8f e3       	ldi	r24, 0x3F	; 63
     9c6:	9c e9       	ldi	r25, 0x9C	; 156
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <psxInit+0x1bc>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <psxInit+0x1c2>
     9ce:	00 00       	nop
     9d0:	2a 98       	cbi	0x05, 2	; 5
     9d2:	87 e8       	ldi	r24, 0x87	; 135
     9d4:	93 e1       	ldi	r25, 0x13	; 19
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <psxInit+0x1ca>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <psxInit+0x1d0>
     9dc:	00 00       	nop
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	33 d2       	rcall	.+1126   	; 0xe48 <spi_mSend>
     9e2:	83 ef       	ldi	r24, 0xF3	; 243
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <psxInit+0x1da>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <psxInit+0x1e0>
     9ec:	00 00       	nop
     9ee:	83 e4       	ldi	r24, 0x43	; 67
     9f0:	2b d2       	rcall	.+1110   	; 0xe48 <spi_mSend>
     9f2:	83 ef       	ldi	r24, 0xF3	; 243
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <psxInit+0x1ea>
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <psxInit+0x1f0>
     9fc:	00 00       	nop
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	23 d2       	rcall	.+1094   	; 0xe48 <spi_mSend>
     a02:	83 ef       	ldi	r24, 0xF3	; 243
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <psxInit+0x1fa>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <psxInit+0x200>
     a0c:	00 00       	nop
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	1b d2       	rcall	.+1078   	; 0xe48 <spi_mSend>
     a12:	83 ef       	ldi	r24, 0xF3	; 243
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	f1 f7       	brne	.-4      	; 0xa16 <psxInit+0x20a>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <psxInit+0x210>
     a1c:	00 00       	nop
     a1e:	8a e5       	ldi	r24, 0x5A	; 90
     a20:	13 d2       	rcall	.+1062   	; 0xe48 <spi_mSend>
     a22:	83 ef       	ldi	r24, 0xF3	; 243
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <psxInit+0x21a>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <psxInit+0x220>
     a2c:	00 00       	nop
     a2e:	8a e5       	ldi	r24, 0x5A	; 90
     a30:	0b d2       	rcall	.+1046   	; 0xe48 <spi_mSend>
     a32:	83 ef       	ldi	r24, 0xF3	; 243
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	f1 f7       	brne	.-4      	; 0xa36 <psxInit+0x22a>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <psxInit+0x230>
     a3c:	00 00       	nop
     a3e:	8a e5       	ldi	r24, 0x5A	; 90
     a40:	03 d2       	rcall	.+1030   	; 0xe48 <spi_mSend>
     a42:	83 ef       	ldi	r24, 0xF3	; 243
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <psxInit+0x23a>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <psxInit+0x240>
     a4c:	00 00       	nop
     a4e:	8a e5       	ldi	r24, 0x5A	; 90
     a50:	fb d1       	rcall	.+1014   	; 0xe48 <spi_mSend>
     a52:	83 ef       	ldi	r24, 0xF3	; 243
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <psxInit+0x24a>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <psxInit+0x250>
     a5c:	00 00       	nop
     a5e:	8a e5       	ldi	r24, 0x5A	; 90
     a60:	f3 d1       	rcall	.+998    	; 0xe48 <spi_mSend>
     a62:	83 ef       	ldi	r24, 0xF3	; 243
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <psxInit+0x25a>
     a6a:	00 c0       	rjmp	.+0      	; 0xa6c <psxInit+0x260>
     a6c:	00 00       	nop
     a6e:	2a 9a       	sbi	0x05, 2	; 5
     a70:	8f e3       	ldi	r24, 0x3F	; 63
     a72:	9c e9       	ldi	r25, 0x9C	; 156
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	f1 f7       	brne	.-4      	; 0xa74 <psxInit+0x268>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <psxInit+0x26e>
     a7a:	00 00       	nop
     a7c:	08 95       	ret

00000a7e <psxtalk>:
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ec 01       	movw	r28, r24
     a88:	06 2f       	mov	r16, r22
     a8a:	14 2f       	mov	r17, r20
     a8c:	2a 98       	cbi	0x05, 2	; 5
     a8e:	87 e8       	ldi	r24, 0x87	; 135
     a90:	93 e1       	ldi	r25, 0x13	; 19
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <psxtalk+0x14>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <psxtalk+0x1a>
     a98:	00 00       	nop
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	d5 d1       	rcall	.+938    	; 0xe48 <spi_mSend>
     a9e:	80 93 13 01 	sts	0x0113, r24
     aa2:	83 ef       	ldi	r24, 0xF3	; 243
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <psxtalk+0x28>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <psxtalk+0x2e>
     aac:	00 00       	nop
     aae:	82 e4       	ldi	r24, 0x42	; 66
     ab0:	cb d1       	rcall	.+918    	; 0xe48 <spi_mSend>
     ab2:	80 93 14 01 	sts	0x0114, r24
     ab6:	83 ef       	ldi	r24, 0xF3	; 243
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <psxtalk+0x3c>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <psxtalk+0x42>
     ac0:	00 00       	nop
     ac2:	80 91 14 01 	lds	r24, 0x0114
     ac6:	81 34       	cpi	r24, 0x41	; 65
     ac8:	09 f0       	breq	.+2      	; 0xacc <psxtalk+0x4e>
     aca:	40 c0       	rjmp	.+128    	; 0xb4c <psxtalk+0xce>
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	bc d1       	rcall	.+888    	; 0xe48 <spi_mSend>
     ad0:	80 93 15 01 	sts	0x0115, r24
     ad4:	83 ef       	ldi	r24, 0xF3	; 243
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <psxtalk+0x5a>
     adc:	00 c0       	rjmp	.+0      	; 0xade <psxtalk+0x60>
     ade:	00 00       	nop
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	b2 d1       	rcall	.+868    	; 0xe48 <spi_mSend>
     ae4:	80 93 16 01 	sts	0x0116, r24
     ae8:	83 ef       	ldi	r24, 0xF3	; 243
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <psxtalk+0x6e>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <psxtalk+0x74>
     af2:	00 00       	nop
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	a8 d1       	rcall	.+848    	; 0xe48 <spi_mSend>
     af8:	80 93 17 01 	sts	0x0117, r24
     afc:	83 ef       	ldi	r24, 0xF3	; 243
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <psxtalk+0x82>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <psxtalk+0x88>
     b06:	00 00       	nop
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	9e d1       	rcall	.+828    	; 0xe48 <spi_mSend>
     b0c:	80 93 18 01 	sts	0x0118, r24
     b10:	83 ef       	ldi	r24, 0xF3	; 243
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <psxtalk+0x96>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <psxtalk+0x9c>
     b1a:	00 00       	nop
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	94 d1       	rcall	.+808    	; 0xe48 <spi_mSend>
     b20:	80 93 19 01 	sts	0x0119, r24
     b24:	83 ef       	ldi	r24, 0xF3	; 243
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <psxtalk+0xaa>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <psxtalk+0xb0>
     b2e:	00 00       	nop
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	8a d1       	rcall	.+788    	; 0xe48 <spi_mSend>
     b34:	80 93 1a 01 	sts	0x011A, r24
     b38:	83 ef       	ldi	r24, 0xF3	; 243
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <psxtalk+0xbe>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <psxtalk+0xc4>
     b42:	00 00       	nop
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	80 d1       	rcall	.+768    	; 0xe48 <spi_mSend>
     b48:	80 93 1b 01 	sts	0x011B, r24
     b4c:	80 91 14 01 	lds	r24, 0x0114
     b50:	83 37       	cpi	r24, 0x73	; 115
     b52:	09 f0       	breq	.+2      	; 0xb56 <psxtalk+0xd8>
     b54:	41 c0       	rjmp	.+130    	; 0xbd8 <psxtalk+0x15a>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	77 d1       	rcall	.+750    	; 0xe48 <spi_mSend>
     b5a:	80 93 15 01 	sts	0x0115, r24
     b5e:	83 ef       	ldi	r24, 0xF3	; 243
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <psxtalk+0xe4>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <psxtalk+0xea>
     b68:	00 00       	nop
     b6a:	80 2f       	mov	r24, r16
     b6c:	6d d1       	rcall	.+730    	; 0xe48 <spi_mSend>
     b6e:	80 93 16 01 	sts	0x0116, r24
     b72:	83 ef       	ldi	r24, 0xF3	; 243
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <psxtalk+0xf8>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <psxtalk+0xfe>
     b7c:	00 00       	nop
     b7e:	81 2f       	mov	r24, r17
     b80:	63 d1       	rcall	.+710    	; 0xe48 <spi_mSend>
     b82:	80 93 17 01 	sts	0x0117, r24
     b86:	83 ef       	ldi	r24, 0xF3	; 243
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <psxtalk+0x10c>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <psxtalk+0x112>
     b90:	00 00       	nop
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	59 d1       	rcall	.+690    	; 0xe48 <spi_mSend>
     b96:	80 93 18 01 	sts	0x0118, r24
     b9a:	83 ef       	ldi	r24, 0xF3	; 243
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <psxtalk+0x120>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <psxtalk+0x126>
     ba4:	00 00       	nop
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	4f d1       	rcall	.+670    	; 0xe48 <spi_mSend>
     baa:	80 93 19 01 	sts	0x0119, r24
     bae:	83 ef       	ldi	r24, 0xF3	; 243
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <psxtalk+0x134>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <psxtalk+0x13a>
     bb8:	00 00       	nop
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	45 d1       	rcall	.+650    	; 0xe48 <spi_mSend>
     bbe:	80 93 1a 01 	sts	0x011A, r24
     bc2:	83 ef       	ldi	r24, 0xF3	; 243
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <psxtalk+0x148>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <psxtalk+0x14e>
     bcc:	00 00       	nop
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	3b d1       	rcall	.+630    	; 0xe48 <spi_mSend>
     bd2:	80 93 1b 01 	sts	0x011B, r24
     bd6:	0e c0       	rjmp	.+28     	; 0xbf4 <psxtalk+0x176>
     bd8:	10 92 15 01 	sts	0x0115, r1
     bdc:	10 92 16 01 	sts	0x0116, r1
     be0:	10 92 17 01 	sts	0x0117, r1
     be4:	10 92 18 01 	sts	0x0118, r1
     be8:	10 92 19 01 	sts	0x0119, r1
     bec:	10 92 1a 01 	sts	0x011A, r1
     bf0:	10 92 1b 01 	sts	0x011B, r1
     bf4:	2a 9a       	sbi	0x05, 2	; 5
     bf6:	87 e8       	ldi	r24, 0x87	; 135
     bf8:	93 e1       	ldi	r25, 0x13	; 19
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <psxtalk+0x17c>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <psxtalk+0x182>
     c00:	00 00       	nop
     c02:	80 91 16 01 	lds	r24, 0x0116
     c06:	2f ef       	ldi	r18, 0xFF	; 255
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	a9 01       	movw	r20, r18
     c0c:	48 1b       	sub	r20, r24
     c0e:	51 09       	sbc	r21, r1
     c10:	ca 01       	movw	r24, r20
     c12:	40 91 17 01 	lds	r20, 0x0117
     c16:	24 1b       	sub	r18, r20
     c18:	31 09       	sbc	r19, r1
     c1a:	41 e0       	ldi	r20, 0x01	; 1
     c1c:	48 83       	st	Y, r20
     c1e:	40 91 14 01 	lds	r20, 0x0114
     c22:	41 34       	cpi	r20, 0x41	; 65
     c24:	09 f0       	breq	.+2      	; 0xc28 <psxtalk+0x1aa>
     c26:	88 c0       	rjmp	.+272    	; 0xd38 <psxtalk+0x2ba>
     c28:	e0 e8       	ldi	r30, 0x80	; 128
     c2a:	ea 83       	std	Y+2, r30	; 0x02
     c2c:	eb 83       	std	Y+3, r30	; 0x03
     c2e:	ec 83       	std	Y+4, r30	; 0x04
     c30:	ed 83       	std	Y+5, r30	; 0x05
     c32:	bc 01       	movw	r22, r24
     c34:	68 70       	andi	r22, 0x08	; 8
     c36:	77 27       	eor	r23, r23
     c38:	75 95       	asr	r23
     c3a:	67 95       	ror	r22
     c3c:	75 95       	asr	r23
     c3e:	67 95       	ror	r22
     c40:	a9 01       	movw	r20, r18
     c42:	41 70       	andi	r20, 0x01	; 1
     c44:	55 27       	eor	r21, r21
     c46:	44 0f       	add	r20, r20
     c48:	55 1f       	adc	r21, r21
     c4a:	44 0f       	add	r20, r20
     c4c:	55 1f       	adc	r21, r21
     c4e:	64 2b       	or	r22, r20
     c50:	48 2f       	mov	r20, r24
     c52:	41 70       	andi	r20, 0x01	; 1
     c54:	64 2b       	or	r22, r20
     c56:	a9 01       	movw	r20, r18
     c58:	42 70       	andi	r20, 0x02	; 2
     c5a:	55 27       	eor	r21, r21
     c5c:	44 0f       	add	r20, r20
     c5e:	55 1f       	adc	r21, r21
     c60:	44 0f       	add	r20, r20
     c62:	55 1f       	adc	r21, r21
     c64:	64 2b       	or	r22, r20
     c66:	a9 01       	movw	r20, r18
     c68:	44 70       	andi	r20, 0x04	; 4
     c6a:	55 27       	eor	r21, r21
     c6c:	44 0f       	add	r20, r20
     c6e:	55 1f       	adc	r21, r21
     c70:	44 0f       	add	r20, r20
     c72:	55 1f       	adc	r21, r21
     c74:	64 2b       	or	r22, r20
     c76:	a9 01       	movw	r20, r18
     c78:	48 70       	andi	r20, 0x08	; 8
     c7a:	55 27       	eor	r21, r21
     c7c:	44 0f       	add	r20, r20
     c7e:	55 1f       	adc	r21, r21
     c80:	44 0f       	add	r20, r20
     c82:	55 1f       	adc	r21, r21
     c84:	64 2b       	or	r22, r20
     c86:	a9 01       	movw	r20, r18
     c88:	40 71       	andi	r20, 0x10	; 16
     c8a:	55 27       	eor	r21, r21
     c8c:	44 0f       	add	r20, r20
     c8e:	55 1f       	adc	r21, r21
     c90:	44 0f       	add	r20, r20
     c92:	55 1f       	adc	r21, r21
     c94:	64 2b       	or	r22, r20
     c96:	a9 01       	movw	r20, r18
     c98:	40 72       	andi	r20, 0x20	; 32
     c9a:	55 27       	eor	r21, r21
     c9c:	44 0f       	add	r20, r20
     c9e:	55 1f       	adc	r21, r21
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	64 2b       	or	r22, r20
     ca6:	6e 83       	std	Y+6, r22	; 0x06
     ca8:	a9 01       	movw	r20, r18
     caa:	40 78       	andi	r20, 0x80	; 128
     cac:	55 27       	eor	r21, r21
     cae:	36 e0       	ldi	r19, 0x06	; 6
     cb0:	55 95       	asr	r21
     cb2:	47 95       	ror	r20
     cb4:	3a 95       	dec	r19
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <psxtalk+0x232>
     cb8:	26 fb       	bst	r18, 6
     cba:	22 27       	eor	r18, r18
     cbc:	20 f9       	bld	r18, 0
     cbe:	24 2b       	or	r18, r20
     cc0:	ac 01       	movw	r20, r24
     cc2:	42 70       	andi	r20, 0x02	; 2
     cc4:	55 27       	eor	r21, r21
     cc6:	44 0f       	add	r20, r20
     cc8:	55 1f       	adc	r21, r21
     cca:	24 2b       	or	r18, r20
     ccc:	ac 01       	movw	r20, r24
     cce:	44 70       	andi	r20, 0x04	; 4
     cd0:	55 27       	eor	r21, r21
     cd2:	44 0f       	add	r20, r20
     cd4:	55 1f       	adc	r21, r21
     cd6:	24 2b       	or	r18, r20
     cd8:	2f 83       	std	Y+7, r18	; 0x07
     cda:	30 91 12 01 	lds	r19, 0x0112
     cde:	38 3c       	cpi	r19, 0xC8	; 200
     ce0:	a8 f4       	brcc	.+42     	; 0xd0c <psxtalk+0x28e>
     ce2:	84 ff       	sbrs	r24, 4
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <psxtalk+0x26c>
     ce6:	19 82       	std	Y+1, r1	; 0x01
     ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <psxtalk+0x278>
     cea:	86 ff       	sbrs	r24, 6
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <psxtalk+0x276>
     cee:	20 ef       	ldi	r18, 0xF0	; 240
     cf0:	29 83       	std	Y+1, r18	; 0x01
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <psxtalk+0x278>
     cf4:	e9 83       	std	Y+1, r30	; 0x01
     cf6:	85 ff       	sbrs	r24, 5
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <psxtalk+0x282>
     cfa:	29 81       	ldd	r18, Y+1	; 0x01
     cfc:	21 5f       	subi	r18, 0xF1	; 241
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <psxtalk+0x28a>
     d00:	87 fd       	sbrc	r24, 7
     d02:	0d c0       	rjmp	.+26     	; 0xd1e <psxtalk+0x2a0>
     d04:	29 81       	ldd	r18, Y+1	; 0x01
     d06:	28 5f       	subi	r18, 0xF8	; 248
     d08:	29 83       	std	Y+1, r18	; 0x01
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <psxtalk+0x2a0>
     d0c:	38 2f       	mov	r19, r24
     d0e:	30 7f       	andi	r19, 0xF0	; 240
     d10:	32 2b       	or	r19, r18
     d12:	3f 83       	std	Y+7, r19	; 0x07
     d14:	28 e8       	ldi	r18, 0x88	; 136
     d16:	29 83       	std	Y+1, r18	; 0x01
     d18:	2e ed       	ldi	r18, 0xDE	; 222
     d1a:	20 93 12 01 	sts	0x0112, r18
     d1e:	80 ff       	sbrs	r24, 0
     d20:	8b c0       	rjmp	.+278    	; 0xe38 <psxtalk+0x3ba>
     d22:	88 71       	andi	r24, 0x18	; 24
     d24:	99 27       	eor	r25, r25
     d26:	48 97       	sbiw	r24, 0x18	; 24
     d28:	09 f0       	breq	.+2      	; 0xd2c <psxtalk+0x2ae>
     d2a:	86 c0       	rjmp	.+268    	; 0xe38 <psxtalk+0x3ba>
     d2c:	80 91 12 01 	lds	r24, 0x0112
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	80 93 12 01 	sts	0x0112, r24
     d36:	80 c0       	rjmp	.+256    	; 0xe38 <psxtalk+0x3ba>
     d38:	43 37       	cpi	r20, 0x73	; 115
     d3a:	09 f0       	breq	.+2      	; 0xd3e <psxtalk+0x2c0>
     d3c:	74 c0       	rjmp	.+232    	; 0xe26 <psxtalk+0x3a8>
     d3e:	40 91 18 01 	lds	r20, 0x0118
     d42:	4a 83       	std	Y+2, r20	; 0x02
     d44:	40 91 19 01 	lds	r20, 0x0119
     d48:	4b 83       	std	Y+3, r20	; 0x03
     d4a:	40 91 1a 01 	lds	r20, 0x011A
     d4e:	4c 83       	std	Y+4, r20	; 0x04
     d50:	40 91 1b 01 	lds	r20, 0x011B
     d54:	4d 83       	std	Y+5, r20	; 0x05
     d56:	84 ff       	sbrs	r24, 4
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <psxtalk+0x2e0>
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	06 c0       	rjmp	.+12     	; 0xd6a <psxtalk+0x2ec>
     d5e:	86 ff       	sbrs	r24, 6
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <psxtalk+0x2e8>
     d62:	40 ef       	ldi	r20, 0xF0	; 240
     d64:	01 c0       	rjmp	.+2      	; 0xd68 <psxtalk+0x2ea>
     d66:	40 e8       	ldi	r20, 0x80	; 128
     d68:	49 83       	std	Y+1, r20	; 0x01
     d6a:	85 ff       	sbrs	r24, 5
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <psxtalk+0x2f6>
     d6e:	49 81       	ldd	r20, Y+1	; 0x01
     d70:	41 5f       	subi	r20, 0xF1	; 241
     d72:	04 c0       	rjmp	.+8      	; 0xd7c <psxtalk+0x2fe>
     d74:	87 fd       	sbrc	r24, 7
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <psxtalk+0x300>
     d78:	49 81       	ldd	r20, Y+1	; 0x01
     d7a:	48 5f       	subi	r20, 0xF8	; 248
     d7c:	49 83       	std	Y+1, r20	; 0x01
     d7e:	bc 01       	movw	r22, r24
     d80:	68 70       	andi	r22, 0x08	; 8
     d82:	77 27       	eor	r23, r23
     d84:	75 95       	asr	r23
     d86:	67 95       	ror	r22
     d88:	75 95       	asr	r23
     d8a:	67 95       	ror	r22
     d8c:	a9 01       	movw	r20, r18
     d8e:	41 70       	andi	r20, 0x01	; 1
     d90:	55 27       	eor	r21, r21
     d92:	44 0f       	add	r20, r20
     d94:	55 1f       	adc	r21, r21
     d96:	44 0f       	add	r20, r20
     d98:	55 1f       	adc	r21, r21
     d9a:	64 2b       	or	r22, r20
     d9c:	48 2f       	mov	r20, r24
     d9e:	41 70       	andi	r20, 0x01	; 1
     da0:	64 2b       	or	r22, r20
     da2:	a9 01       	movw	r20, r18
     da4:	42 70       	andi	r20, 0x02	; 2
     da6:	55 27       	eor	r21, r21
     da8:	44 0f       	add	r20, r20
     daa:	55 1f       	adc	r21, r21
     dac:	44 0f       	add	r20, r20
     dae:	55 1f       	adc	r21, r21
     db0:	64 2b       	or	r22, r20
     db2:	a9 01       	movw	r20, r18
     db4:	44 70       	andi	r20, 0x04	; 4
     db6:	55 27       	eor	r21, r21
     db8:	44 0f       	add	r20, r20
     dba:	55 1f       	adc	r21, r21
     dbc:	44 0f       	add	r20, r20
     dbe:	55 1f       	adc	r21, r21
     dc0:	64 2b       	or	r22, r20
     dc2:	a9 01       	movw	r20, r18
     dc4:	48 70       	andi	r20, 0x08	; 8
     dc6:	55 27       	eor	r21, r21
     dc8:	44 0f       	add	r20, r20
     dca:	55 1f       	adc	r21, r21
     dcc:	44 0f       	add	r20, r20
     dce:	55 1f       	adc	r21, r21
     dd0:	64 2b       	or	r22, r20
     dd2:	a9 01       	movw	r20, r18
     dd4:	40 71       	andi	r20, 0x10	; 16
     dd6:	55 27       	eor	r21, r21
     dd8:	44 0f       	add	r20, r20
     dda:	55 1f       	adc	r21, r21
     ddc:	44 0f       	add	r20, r20
     dde:	55 1f       	adc	r21, r21
     de0:	64 2b       	or	r22, r20
     de2:	a9 01       	movw	r20, r18
     de4:	40 72       	andi	r20, 0x20	; 32
     de6:	55 27       	eor	r21, r21
     de8:	44 0f       	add	r20, r20
     dea:	55 1f       	adc	r21, r21
     dec:	44 0f       	add	r20, r20
     dee:	55 1f       	adc	r21, r21
     df0:	64 2b       	or	r22, r20
     df2:	6e 83       	std	Y+6, r22	; 0x06
     df4:	a9 01       	movw	r20, r18
     df6:	40 78       	andi	r20, 0x80	; 128
     df8:	55 27       	eor	r21, r21
     dfa:	06 e0       	ldi	r16, 0x06	; 6
     dfc:	55 95       	asr	r21
     dfe:	47 95       	ror	r20
     e00:	0a 95       	dec	r16
     e02:	e1 f7       	brne	.-8      	; 0xdfc <psxtalk+0x37e>
     e04:	26 fb       	bst	r18, 6
     e06:	22 27       	eor	r18, r18
     e08:	20 f9       	bld	r18, 0
     e0a:	24 2b       	or	r18, r20
     e0c:	ac 01       	movw	r20, r24
     e0e:	42 70       	andi	r20, 0x02	; 2
     e10:	55 27       	eor	r21, r21
     e12:	44 0f       	add	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	24 2b       	or	r18, r20
     e18:	84 70       	andi	r24, 0x04	; 4
     e1a:	99 27       	eor	r25, r25
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	28 2b       	or	r18, r24
     e22:	2f 83       	std	Y+7, r18	; 0x07
     e24:	09 c0       	rjmp	.+18     	; 0xe38 <psxtalk+0x3ba>
     e26:	88 e8       	ldi	r24, 0x88	; 136
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	80 e8       	ldi	r24, 0x80	; 128
     e2c:	8a 83       	std	Y+2, r24	; 0x02
     e2e:	8b 83       	std	Y+3, r24	; 0x03
     e30:	8c 83       	std	Y+4, r24	; 0x04
     e32:	8d 83       	std	Y+5, r24	; 0x05
     e34:	1e 82       	std	Y+6, r1	; 0x06
     e36:	1f 82       	std	Y+7, r1	; 0x07
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	08 95       	ret

00000e42 <spi_mInit>:
     e42:	8f e7       	ldi	r24, 0x7F	; 127
     e44:	8c bd       	out	0x2c, r24	; 44
     e46:	08 95       	ret

00000e48 <spi_mSend>:
     e48:	8e bd       	out	0x2e, r24	; 46
     e4a:	0d b4       	in	r0, 0x2d	; 45
     e4c:	07 fe       	sbrs	r0, 7
     e4e:	fd cf       	rjmp	.-6      	; 0xe4a <spi_mSend+0x2>
     e50:	8e b5       	in	r24, 0x2e	; 46
     e52:	08 95       	ret

00000e54 <usbSetInterrupt>:
     e54:	cf 93       	push	r28
     e56:	c6 2f       	mov	r28, r22
     e58:	20 91 30 01 	lds	r18, 0x0130
     e5c:	24 ff       	sbrs	r18, 4
     e5e:	07 c0       	rjmp	.+14     	; 0xe6e <usbSetInterrupt+0x1a>
     e60:	20 91 31 01 	lds	r18, 0x0131
     e64:	38 e8       	ldi	r19, 0x88	; 136
     e66:	23 27       	eor	r18, r19
     e68:	20 93 31 01 	sts	0x0131, r18
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <usbSetInterrupt+0x20>
     e6e:	2a e5       	ldi	r18, 0x5A	; 90
     e70:	20 93 30 01 	sts	0x0130, r18
     e74:	dc 01       	movw	r26, r24
     e76:	e2 e3       	ldi	r30, 0x32	; 50
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	8c 2f       	mov	r24, r28
     e7c:	8e 0f       	add	r24, r30
     e7e:	9d 91       	ld	r25, X+
     e80:	91 93       	st	Z+, r25
     e82:	8e 13       	cpse	r24, r30
     e84:	fc cf       	rjmp	.-8      	; 0xe7e <usbSetInterrupt+0x2a>
     e86:	6c 2f       	mov	r22, r28
     e88:	82 e3       	ldi	r24, 0x32	; 50
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	a3 db       	rcall	.-2234   	; 0x5d4 <usbCrc16Append>
     e8e:	cc 5f       	subi	r28, 0xFC	; 252
     e90:	c0 93 30 01 	sts	0x0130, r28
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <usbPoll>:
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	60 91 41 01 	lds	r22, 0x0141
     ea0:	63 50       	subi	r22, 0x03	; 3
     ea2:	67 fd       	sbrc	r22, 7
     ea4:	cf c0       	rjmp	.+414    	; 0x1044 <usbPoll+0x1ac>
     ea6:	80 91 3e 01 	lds	r24, 0x013E
     eaa:	cc e0       	ldi	r28, 0x0C	; 12
     eac:	d0 e0       	ldi	r29, 0x00	; 0
     eae:	c8 1b       	sub	r28, r24
     eb0:	d1 09       	sbc	r29, r1
     eb2:	cb 5b       	subi	r28, 0xBB	; 187
     eb4:	de 4f       	sbci	r29, 0xFE	; 254
     eb6:	80 91 3d 01 	lds	r24, 0x013D
     eba:	8d 32       	cpi	r24, 0x2D	; 45
     ebc:	09 f0       	breq	.+2      	; 0xec0 <usbPoll+0x28>
     ebe:	ae c0       	rjmp	.+348    	; 0x101c <usbPoll+0x184>
     ec0:	68 30       	cpi	r22, 0x08	; 8
     ec2:	09 f0       	breq	.+2      	; 0xec6 <usbPoll+0x2e>
     ec4:	bd c0       	rjmp	.+378    	; 0x1040 <usbPoll+0x1a8>
     ec6:	83 ec       	ldi	r24, 0xC3	; 195
     ec8:	80 93 25 01 	sts	0x0125, r24
     ecc:	8a e5       	ldi	r24, 0x5A	; 90
     ece:	80 93 02 01 	sts	0x0102, r24
     ed2:	10 92 1c 01 	sts	0x011C, r1
     ed6:	88 81       	ld	r24, Y
     ed8:	80 76       	andi	r24, 0x60	; 96
     eda:	21 f0       	breq	.+8      	; 0xee4 <usbPoll+0x4c>
     edc:	ce 01       	movw	r24, r28
     ede:	29 d1       	rcall	.+594    	; 0x1132 <usbFunctionSetup>
     ee0:	9c 01       	movw	r18, r24
     ee2:	84 c0       	rjmp	.+264    	; 0xfec <usbPoll+0x154>
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	10 92 2e 01 	sts	0x012E, r1
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	81 11       	cpse	r24, r1
     eee:	07 c0       	rjmp	.+14     	; 0xefe <usbPoll+0x66>
     ef0:	10 92 2f 01 	sts	0x012F, r1
     ef4:	8e e2       	ldi	r24, 0x2E	; 46
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	22 e0       	ldi	r18, 0x02	; 2
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	73 c0       	rjmp	.+230    	; 0xfe4 <usbPoll+0x14c>
     efe:	85 30       	cpi	r24, 0x05	; 5
     f00:	19 f4       	brne	.+6      	; 0xf08 <usbPoll+0x70>
     f02:	90 93 42 01 	sts	0x0142, r25
     f06:	6a c0       	rjmp	.+212    	; 0xfdc <usbPoll+0x144>
     f08:	86 30       	cpi	r24, 0x06	; 6
     f0a:	09 f0       	breq	.+2      	; 0xf0e <usbPoll+0x76>
     f0c:	50 c0       	rjmp	.+160    	; 0xfae <usbPoll+0x116>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	49 f4       	brne	.+18     	; 0xf26 <usbPoll+0x8e>
     f14:	8f e3       	ldi	r24, 0x3F	; 63
     f16:	95 e0       	ldi	r25, 0x05	; 5
     f18:	90 93 40 01 	sts	0x0140, r25
     f1c:	80 93 3f 01 	sts	0x013F, r24
     f20:	22 e1       	ldi	r18, 0x12	; 18
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 c0       	rjmp	.+128    	; 0xfa6 <usbPoll+0x10e>
     f26:	82 30       	cpi	r24, 0x02	; 2
     f28:	49 f4       	brne	.+18     	; 0xf3c <usbPoll+0xa4>
     f2a:	8d e1       	ldi	r24, 0x1D	; 29
     f2c:	95 e0       	ldi	r25, 0x05	; 5
     f2e:	90 93 40 01 	sts	0x0140, r25
     f32:	80 93 3f 01 	sts	0x013F, r24
     f36:	22 e2       	ldi	r18, 0x22	; 34
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	35 c0       	rjmp	.+106    	; 0xfa6 <usbPoll+0x10e>
     f3c:	83 30       	cpi	r24, 0x03	; 3
     f3e:	d9 f4       	brne	.+54     	; 0xf76 <usbPoll+0xde>
     f40:	91 11       	cpse	r25, r1
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <usbPoll+0xbe>
     f44:	8d e6       	ldi	r24, 0x6D	; 109
     f46:	95 e0       	ldi	r25, 0x05	; 5
     f48:	90 93 40 01 	sts	0x0140, r25
     f4c:	80 93 3f 01 	sts	0x013F, r24
     f50:	24 e0       	ldi	r18, 0x04	; 4
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	28 c0       	rjmp	.+80     	; 0xfa6 <usbPoll+0x10e>
     f56:	91 30       	cpi	r25, 0x01	; 1
     f58:	19 f4       	brne	.+6      	; 0xf60 <usbPoll+0xc8>
     f5a:	8f e5       	ldi	r24, 0x5F	; 95
     f5c:	95 e0       	ldi	r25, 0x05	; 5
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <usbPoll+0xd0>
     f60:	92 30       	cpi	r25, 0x02	; 2
     f62:	f9 f4       	brne	.+62     	; 0xfa2 <usbPoll+0x10a>
     f64:	81 e5       	ldi	r24, 0x51	; 81
     f66:	95 e0       	ldi	r25, 0x05	; 5
     f68:	90 93 40 01 	sts	0x0140, r25
     f6c:	80 93 3f 01 	sts	0x013F, r24
     f70:	2e e0       	ldi	r18, 0x0E	; 14
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	18 c0       	rjmp	.+48     	; 0xfa6 <usbPoll+0x10e>
     f76:	81 32       	cpi	r24, 0x21	; 33
     f78:	49 f4       	brne	.+18     	; 0xf8c <usbPoll+0xf4>
     f7a:	8f e2       	ldi	r24, 0x2F	; 47
     f7c:	95 e0       	ldi	r25, 0x05	; 5
     f7e:	90 93 40 01 	sts	0x0140, r25
     f82:	80 93 3f 01 	sts	0x013F, r24
     f86:	29 e0       	ldi	r18, 0x09	; 9
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	0d c0       	rjmp	.+26     	; 0xfa6 <usbPoll+0x10e>
     f8c:	82 32       	cpi	r24, 0x22	; 34
     f8e:	49 f4       	brne	.+18     	; 0xfa2 <usbPoll+0x10a>
     f90:	84 e3       	ldi	r24, 0x34	; 52
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	90 93 40 01 	sts	0x0140, r25
     f98:	80 93 3f 01 	sts	0x013F, r24
     f9c:	29 ee       	ldi	r18, 0xE9	; 233
     f9e:	34 e0       	ldi	r19, 0x04	; 4
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <usbPoll+0x10e>
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	80 e4       	ldi	r24, 0x40	; 64
     fa8:	80 93 1c 01 	sts	0x011C, r24
     fac:	1f c0       	rjmp	.+62     	; 0xfec <usbPoll+0x154>
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	69 f0       	breq	.+26     	; 0xfcc <usbPoll+0x134>
     fb2:	89 30       	cpi	r24, 0x09	; 9
     fb4:	19 f4       	brne	.+6      	; 0xfbc <usbPoll+0x124>
     fb6:	90 93 44 01 	sts	0x0144, r25
     fba:	10 c0       	rjmp	.+32     	; 0xfdc <usbPoll+0x144>
     fbc:	8a 30       	cpi	r24, 0x0A	; 10
     fbe:	49 f0       	breq	.+18     	; 0xfd2 <usbPoll+0x13a>
     fc0:	8b 30       	cpi	r24, 0x0B	; 11
     fc2:	61 f4       	brne	.+24     	; 0xfdc <usbPoll+0x144>
     fc4:	8b e4       	ldi	r24, 0x4B	; 75
     fc6:	80 93 31 01 	sts	0x0131, r24
     fca:	08 c0       	rjmp	.+16     	; 0xfdc <usbPoll+0x144>
     fcc:	84 e4       	ldi	r24, 0x44	; 68
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <usbPoll+0x13e>
     fd2:	8e e2       	ldi	r24, 0x2E	; 46
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <usbPoll+0x14c>
     fdc:	8e e2       	ldi	r24, 0x2E	; 46
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	90 93 40 01 	sts	0x0140, r25
     fe8:	80 93 3f 01 	sts	0x013F, r24
     fec:	2f 3f       	cpi	r18, 0xFF	; 255
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	38 07       	cpc	r19, r24
     ff2:	49 f4       	brne	.+18     	; 0x1006 <usbPoll+0x16e>
     ff4:	88 81       	ld	r24, Y
     ff6:	87 ff       	sbrs	r24, 7
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <usbPoll+0x166>
     ffa:	2e 81       	ldd	r18, Y+6	; 0x06
     ffc:	3f 81       	ldd	r19, Y+7	; 0x07
     ffe:	80 e8       	ldi	r24, 0x80	; 128
    1000:	80 93 1c 01 	sts	0x011C, r24
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <usbPoll+0x17a>
    1006:	8e 81       	ldd	r24, Y+6	; 0x06
    1008:	9f 81       	ldd	r25, Y+7	; 0x07
    100a:	82 17       	cp	r24, r18
    100c:	93 07       	cpc	r25, r19
    100e:	08 f4       	brcc	.+2      	; 0x1012 <usbPoll+0x17a>
    1010:	9c 01       	movw	r18, r24
    1012:	30 93 01 01 	sts	0x0101, r19
    1016:	20 93 00 01 	sts	0x0100, r18
    101a:	12 c0       	rjmp	.+36     	; 0x1040 <usbPoll+0x1a8>
    101c:	80 91 1c 01 	lds	r24, 0x011C
    1020:	87 ff       	sbrs	r24, 7
    1022:	0e c0       	rjmp	.+28     	; 0x1040 <usbPoll+0x1a8>
    1024:	ce 01       	movw	r24, r28
    1026:	b9 d0       	rcall	.+370    	; 0x119a <usbFunctionWrite>
    1028:	8f 3f       	cpi	r24, 0xFF	; 255
    102a:	21 f4       	brne	.+8      	; 0x1034 <usbPoll+0x19c>
    102c:	8e e1       	ldi	r24, 0x1E	; 30
    102e:	80 93 02 01 	sts	0x0102, r24
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <usbPoll+0x1a8>
    1034:	88 23       	and	r24, r24
    1036:	21 f0       	breq	.+8      	; 0x1040 <usbPoll+0x1a8>
    1038:	10 92 01 01 	sts	0x0101, r1
    103c:	10 92 00 01 	sts	0x0100, r1
    1040:	10 92 41 01 	sts	0x0141, r1
    1044:	80 91 02 01 	lds	r24, 0x0102
    1048:	84 ff       	sbrs	r24, 4
    104a:	59 c0       	rjmp	.+178    	; 0x10fe <usbPoll+0x266>
    104c:	80 91 00 01 	lds	r24, 0x0100
    1050:	90 91 01 01 	lds	r25, 0x0101
    1054:	8f 3f       	cpi	r24, 0xFF	; 255
    1056:	2f ef       	ldi	r18, 0xFF	; 255
    1058:	92 07       	cpc	r25, r18
    105a:	09 f4       	brne	.+2      	; 0x105e <usbPoll+0x1c6>
    105c:	50 c0       	rjmp	.+160    	; 0x10fe <usbPoll+0x266>
    105e:	bc 01       	movw	r22, r24
    1060:	89 30       	cpi	r24, 0x09	; 9
    1062:	91 05       	cpc	r25, r1
    1064:	10 f0       	brcs	.+4      	; 0x106a <usbPoll+0x1d2>
    1066:	68 e0       	ldi	r22, 0x08	; 8
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	86 1b       	sub	r24, r22
    106c:	97 0b       	sbc	r25, r23
    106e:	90 93 01 01 	sts	0x0101, r25
    1072:	80 93 00 01 	sts	0x0100, r24
    1076:	80 91 25 01 	lds	r24, 0x0125
    107a:	98 e8       	ldi	r25, 0x88	; 136
    107c:	89 27       	eor	r24, r25
    107e:	80 93 25 01 	sts	0x0125, r24
    1082:	c6 2f       	mov	r28, r22
    1084:	66 23       	and	r22, r22
    1086:	61 f1       	breq	.+88     	; 0x10e0 <usbPoll+0x248>
    1088:	80 91 3f 01 	lds	r24, 0x013F
    108c:	90 91 40 01 	lds	r25, 0x0140
    1090:	20 91 1c 01 	lds	r18, 0x011C
    1094:	26 ff       	sbrs	r18, 6
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <usbPoll+0x224>
    1098:	a6 e2       	ldi	r26, 0x26	; 38
    109a:	b1 e0       	ldi	r27, 0x01	; 1
    109c:	25 e2       	ldi	r18, 0x25	; 37
    109e:	31 e0       	ldi	r19, 0x01	; 1
    10a0:	20 95       	com	r18
    10a2:	30 95       	com	r19
    10a4:	28 0f       	add	r18, r24
    10a6:	39 1f       	adc	r19, r25
    10a8:	46 2f       	mov	r20, r22
    10aa:	4a 0f       	add	r20, r26
    10ac:	f9 01       	movw	r30, r18
    10ae:	ea 0f       	add	r30, r26
    10b0:	fb 1f       	adc	r31, r27
    10b2:	e4 91       	lpm	r30, Z
    10b4:	ed 93       	st	X+, r30
    10b6:	4a 13       	cpse	r20, r26
    10b8:	f9 cf       	rjmp	.-14     	; 0x10ac <usbPoll+0x214>
    10ba:	09 c0       	rjmp	.+18     	; 0x10ce <usbPoll+0x236>
    10bc:	e6 e2       	ldi	r30, 0x26	; 38
    10be:	f1 e0       	ldi	r31, 0x01	; 1
    10c0:	dc 01       	movw	r26, r24
    10c2:	26 2f       	mov	r18, r22
    10c4:	2e 0f       	add	r18, r30
    10c6:	3d 91       	ld	r19, X+
    10c8:	31 93       	st	Z+, r19
    10ca:	2e 13       	cpse	r18, r30
    10cc:	fc cf       	rjmp	.-8      	; 0x10c6 <usbPoll+0x22e>
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	2f ef       	ldi	r18, 0xFF	; 255
    10d2:	2c 0f       	add	r18, r28
    10d4:	82 0f       	add	r24, r18
    10d6:	91 1d       	adc	r25, r1
    10d8:	90 93 40 01 	sts	0x0140, r25
    10dc:	80 93 3f 01 	sts	0x013F, r24
    10e0:	6c 2f       	mov	r22, r28
    10e2:	86 e2       	ldi	r24, 0x26	; 38
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	76 da       	rcall	.-2836   	; 0x5d4 <usbCrc16Append>
    10e8:	cc 5f       	subi	r28, 0xFC	; 252
    10ea:	cc 30       	cpi	r28, 0x0C	; 12
    10ec:	31 f0       	breq	.+12     	; 0x10fa <usbPoll+0x262>
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
    10f2:	90 93 01 01 	sts	0x0101, r25
    10f6:	80 93 00 01 	sts	0x0100, r24
    10fa:	c0 93 02 01 	sts	0x0102, r28
    10fe:	84 e1       	ldi	r24, 0x14	; 20
    1100:	99 b1       	in	r25, 0x09	; 9
    1102:	94 71       	andi	r25, 0x14	; 20
    1104:	31 f4       	brne	.+12     	; 0x1112 <usbPoll+0x27a>
    1106:	81 50       	subi	r24, 0x01	; 1
    1108:	d9 f7       	brne	.-10     	; 0x1100 <usbPoll+0x268>
    110a:	10 92 42 01 	sts	0x0142, r1
    110e:	10 92 3c 01 	sts	0x013C, r1
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <usbInit>:
    1118:	e9 e6       	ldi	r30, 0x69	; 105
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	82 60       	ori	r24, 0x02	; 2
    1120:	80 83       	st	Z, r24
    1122:	e8 9a       	sbi	0x1d, 0	; 29
    1124:	8b e4       	ldi	r24, 0x4B	; 75
    1126:	80 93 31 01 	sts	0x0131, r24
    112a:	8a e5       	ldi	r24, 0x5A	; 90
    112c:	80 93 30 01 	sts	0x0130, r24
    1130:	08 95       	ret

00001132 <usbFunctionSetup>:
    1132:	fc 01       	movw	r30, r24
    1134:	80 81       	ld	r24, Z
    1136:	80 76       	andi	r24, 0x60	; 96
    1138:	80 32       	cpi	r24, 0x20	; 32
    113a:	61 f5       	brne	.+88     	; 0x1194 <usbFunctionSetup+0x62>
    113c:	21 81       	ldd	r18, Z+1	; 0x01
    113e:	21 30       	cpi	r18, 0x01	; 1
    1140:	f9 f4       	brne	.+62     	; 0x1180 <usbFunctionSetup+0x4e>
    1142:	83 81       	ldd	r24, Z+3	; 0x03
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	49 f4       	brne	.+18     	; 0x115a <usbFunctionSetup+0x28>
    1148:	8c e5       	ldi	r24, 0x5C	; 92
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	90 93 40 01 	sts	0x0140, r25
    1150:	80 93 3f 01 	sts	0x013F, r24
    1154:	88 e0       	ldi	r24, 0x08	; 8
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	08 95       	ret
    115a:	83 30       	cpi	r24, 0x03	; 3
    115c:	d9 f4       	brne	.+54     	; 0x1194 <usbFunctionSetup+0x62>
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	82 30       	cpi	r24, 0x02	; 2
    1162:	19 f4       	brne	.+6      	; 0x116a <usbFunctionSetup+0x38>
    1164:	88 e0       	ldi	r24, 0x08	; 8
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <usbFunctionSetup+0x40>
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	99 f4       	brne	.+38     	; 0x1194 <usbFunctionSetup+0x62>
    116e:	83 e0       	ldi	r24, 0x03	; 3
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	90 93 40 01 	sts	0x0140, r25
    1176:	80 93 3f 01 	sts	0x013F, r24
    117a:	85 e0       	ldi	r24, 0x05	; 5
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	08 95       	ret
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	29 30       	cpi	r18, 0x09	; 9
    1186:	11 f0       	breq	.+4      	; 0x118c <usbFunctionSetup+0x5a>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	91 95       	neg	r25
    118e:	81 95       	neg	r24
    1190:	91 09       	sbc	r25, r1
    1192:	08 95       	ret
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	08 95       	ret

0000119a <usbFunctionWrite>:
    119a:	fc 01       	movw	r30, r24
    119c:	80 81       	ld	r24, Z
    119e:	85 30       	cpi	r24, 0x05	; 5
    11a0:	39 f4       	brne	.+14     	; 0x11b0 <usbFunctionWrite+0x16>
    11a2:	82 81       	ldd	r24, Z+2	; 0x02
    11a4:	81 11       	cpse	r24, r1
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <usbFunctionWrite+0x10>
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	80 93 0d 01 	sts	0x010D, r24
    11ae:	50 c0       	rjmp	.+160    	; 0x1250 <usbFunctionWrite+0xb6>
    11b0:	86 30       	cpi	r24, 0x06	; 6
    11b2:	a1 f0       	breq	.+40     	; 0x11dc <usbFunctionWrite+0x42>
    11b4:	8a 30       	cpi	r24, 0x0A	; 10
    11b6:	c1 f4       	brne	.+48     	; 0x11e8 <usbFunctionWrite+0x4e>
    11b8:	81 81       	ldd	r24, Z+1	; 0x01
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	51 f4       	brne	.+20     	; 0x11d2 <usbFunctionWrite+0x38>
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	11 f4       	brne	.+4      	; 0x11c8 <usbFunctionWrite+0x2e>
    11c4:	f1 9a       	sbi	0x1e, 1	; 30
    11c6:	44 c0       	rjmp	.+136    	; 0x1250 <usbFunctionWrite+0xb6>
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	09 f0       	breq	.+2      	; 0x11ce <usbFunctionWrite+0x34>
    11cc:	41 c0       	rjmp	.+130    	; 0x1250 <usbFunctionWrite+0xb6>
    11ce:	f1 98       	cbi	0x1e, 1	; 30
    11d0:	3f c0       	rjmp	.+126    	; 0x1250 <usbFunctionWrite+0xb6>
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	e9 f5       	brne	.+122    	; 0x1250 <usbFunctionWrite+0xb6>
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	11 f4       	brne	.+4      	; 0x11e0 <usbFunctionWrite+0x46>
    11dc:	f0 9a       	sbi	0x1e, 0	; 30
    11de:	38 c0       	rjmp	.+112    	; 0x1250 <usbFunctionWrite+0xb6>
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	b1 f5       	brne	.+108    	; 0x1250 <usbFunctionWrite+0xb6>
    11e4:	f0 98       	cbi	0x1e, 0	; 30
    11e6:	34 c0       	rjmp	.+104    	; 0x1250 <usbFunctionWrite+0xb6>
    11e8:	8c 30       	cpi	r24, 0x0C	; 12
    11ea:	71 f4       	brne	.+28     	; 0x1208 <usbFunctionWrite+0x6e>
    11ec:	f2 98       	cbi	0x1e, 2	; 30
    11ee:	f0 98       	cbi	0x1e, 0	; 30
    11f0:	f1 98       	cbi	0x1e, 1	; 30
    11f2:	10 92 64 01 	sts	0x0164, r1
    11f6:	10 92 5b 01 	sts	0x015B, r1
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	90 93 11 01 	sts	0x0111, r25
    1202:	80 93 10 01 	sts	0x0110, r24
    1206:	12 c0       	rjmp	.+36     	; 0x122c <usbFunctionWrite+0x92>
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	11 f5       	brne	.+68     	; 0x1250 <usbFunctionWrite+0xb6>
    120c:	64 30       	cpi	r22, 0x04	; 4
    120e:	21 f4       	brne	.+8      	; 0x1218 <usbFunctionWrite+0x7e>
    1210:	81 81       	ldd	r24, Z+1	; 0x01
    1212:	80 93 09 01 	sts	0x0109, r24
    1216:	1c c0       	rjmp	.+56     	; 0x1250 <usbFunctionWrite+0xb6>
    1218:	82 81       	ldd	r24, Z+2	; 0x02
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	61 f4       	brne	.+24     	; 0x1236 <usbFunctionWrite+0x9c>
    121e:	23 81       	ldd	r18, Z+3	; 0x03
    1220:	84 81       	ldd	r24, Z+4	; 0x04
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	98 2f       	mov	r25, r24
    1226:	88 27       	eor	r24, r24
    1228:	82 0f       	add	r24, r18
    122a:	91 1d       	adc	r25, r1
    122c:	90 93 0f 01 	sts	0x010F, r25
    1230:	80 93 0e 01 	sts	0x010E, r24
    1234:	0d c0       	rjmp	.+26     	; 0x1250 <usbFunctionWrite+0xb6>
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	59 f4       	brne	.+22     	; 0x1250 <usbFunctionWrite+0xb6>
    123a:	23 81       	ldd	r18, Z+3	; 0x03
    123c:	84 81       	ldd	r24, Z+4	; 0x04
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	98 2f       	mov	r25, r24
    1242:	88 27       	eor	r24, r24
    1244:	82 0f       	add	r24, r18
    1246:	91 1d       	adc	r25, r1
    1248:	90 93 11 01 	sts	0x0111, r25
    124c:	80 93 10 01 	sts	0x0110, r24
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	08 95       	ret

00001254 <__vector_11>:
    1254:	1f 92       	push	r1
    1256:	0f 92       	push	r0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	0f 92       	push	r0
    125c:	11 24       	eor	r1, r1
    125e:	8f 93       	push	r24
    1260:	ef 93       	push	r30
    1262:	ff 93       	push	r31
    1264:	10 92 64 01 	sts	0x0164, r1
    1268:	ef e6       	ldi	r30, 0x6F	; 111
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8d 7f       	andi	r24, 0xFD	; 253
    1270:	80 83       	st	Z, r24
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	8f 91       	pop	r24
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <__vector_12>:
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	8f 93       	push	r24
    128e:	ef 93       	push	r30
    1290:	ff 93       	push	r31
    1292:	10 92 5b 01 	sts	0x015B, r1
    1296:	ef e6       	ldi	r30, 0x6F	; 111
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8b 7f       	andi	r24, 0xFB	; 251
    129e:	80 83       	st	Z, r24
    12a0:	ff 91       	pop	r31
    12a2:	ef 91       	pop	r30
    12a4:	8f 91       	pop	r24
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	0f 90       	pop	r0
    12ac:	1f 90       	pop	r1
    12ae:	18 95       	reti

000012b0 <main>:
    12b0:	8f e2       	ldi	r24, 0x2F	; 47
    12b2:	84 b9       	out	0x04, r24	; 4
    12b4:	84 e0       	ldi	r24, 0x04	; 4
    12b6:	85 b9       	out	0x05, r24	; 5
    12b8:	18 b8       	out	0x08, r1	; 8
    12ba:	17 b8       	out	0x07, r1	; 7
    12bc:	8b ee       	ldi	r24, 0xEB	; 235
    12be:	8b b9       	out	0x0b, r24	; 11
    12c0:	84 e1       	ldi	r24, 0x14	; 20
    12c2:	8a b9       	out	0x0a, r24	; 10
    12c4:	80 e1       	ldi	r24, 0x10	; 16
    12c6:	8a b9       	out	0x0a, r24	; 10
    12c8:	54 9a       	sbi	0x0a, 4	; 10
    12ca:	2f e7       	ldi	r18, 0x7F	; 127
    12cc:	8f e4       	ldi	r24, 0x4F	; 79
    12ce:	92 e1       	ldi	r25, 0x12	; 18
    12d0:	21 50       	subi	r18, 0x01	; 1
    12d2:	80 40       	sbci	r24, 0x00	; 0
    12d4:	90 40       	sbci	r25, 0x00	; 0
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <main+0x20>
    12d8:	00 c0       	rjmp	.+0      	; 0x12da <main+0x2a>
    12da:	00 00       	nop
    12dc:	54 98       	cbi	0x0a, 4	; 10
    12de:	1c df       	rcall	.-456    	; 0x1118 <usbInit>
    12e0:	80 91 81 00 	lds	r24, 0x0081
    12e4:	85 60       	ori	r24, 0x05	; 5
    12e6:	80 93 81 00 	sts	0x0081, r24
    12ea:	ab dd       	rcall	.-1194   	; 0xe42 <spi_mInit>
    12ec:	8f da       	rcall	.-2786   	; 0x80c <psxInit>
    12ee:	78 94       	sei
    12f0:	cb e0       	ldi	r28, 0x0B	; 11
    12f2:	df ef       	ldi	r29, 0xFF	; 255
    12f4:	f0 9b       	sbis	0x1e, 0	; 30
    12f6:	1b c0       	rjmp	.+54     	; 0x132e <main+0x7e>
    12f8:	80 91 6f 00 	lds	r24, 0x006F
    12fc:	82 60       	ori	r24, 0x02	; 2
    12fe:	80 93 6f 00 	sts	0x006F, r24
    1302:	20 91 84 00 	lds	r18, 0x0084
    1306:	30 91 85 00 	lds	r19, 0x0085
    130a:	40 91 10 01 	lds	r20, 0x0110
    130e:	50 91 11 01 	lds	r21, 0x0111
    1312:	c4 9f       	mul	r28, r20
    1314:	c0 01       	movw	r24, r0
    1316:	c5 9f       	mul	r28, r21
    1318:	90 0d       	add	r25, r0
    131a:	11 24       	eor	r1, r1
    131c:	82 0f       	add	r24, r18
    131e:	93 1f       	adc	r25, r19
    1320:	90 93 89 00 	sts	0x0089, r25
    1324:	80 93 88 00 	sts	0x0088, r24
    1328:	d0 93 64 01 	sts	0x0164, r29
    132c:	f0 98       	cbi	0x1e, 0	; 30
    132e:	f1 9b       	sbis	0x1e, 1	; 30
    1330:	1d c0       	rjmp	.+58     	; 0x136c <main+0xbc>
    1332:	80 91 6f 00 	lds	r24, 0x006F
    1336:	84 60       	ori	r24, 0x04	; 4
    1338:	80 93 6f 00 	sts	0x006F, r24
    133c:	20 91 84 00 	lds	r18, 0x0084
    1340:	30 91 85 00 	lds	r19, 0x0085
    1344:	40 91 0e 01 	lds	r20, 0x010E
    1348:	50 91 0f 01 	lds	r21, 0x010F
    134c:	c4 9f       	mul	r28, r20
    134e:	c0 01       	movw	r24, r0
    1350:	c5 9f       	mul	r28, r21
    1352:	90 0d       	add	r25, r0
    1354:	11 24       	eor	r1, r1
    1356:	82 0f       	add	r24, r18
    1358:	93 1f       	adc	r25, r19
    135a:	90 93 8b 00 	sts	0x008B, r25
    135e:	80 93 8a 00 	sts	0x008A, r24
    1362:	80 91 0d 01 	lds	r24, 0x010D
    1366:	80 93 5b 01 	sts	0x015B, r24
    136a:	f1 98       	cbi	0x1e, 1	; 30
    136c:	95 dd       	rcall	.-1238   	; 0xe98 <usbPoll>
    136e:	40 91 5b 01 	lds	r20, 0x015B
    1372:	80 91 64 01 	lds	r24, 0x0164
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	81 11       	cpse	r24, r1
    137a:	01 c0       	rjmp	.+2      	; 0x137e <main+0xce>
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	8c e5       	ldi	r24, 0x5C	; 92
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	7d db       	rcall	.-2310   	; 0xa7e <psxtalk>
    1384:	ac e5       	ldi	r26, 0x5C	; 92
    1386:	b1 e0       	ldi	r27, 0x01	; 1
    1388:	ed e1       	ldi	r30, 0x1D	; 29
    138a:	f1 e0       	ldi	r31, 0x01	; 1
    138c:	91 91       	ld	r25, Z+
    138e:	8d 91       	ld	r24, X+
    1390:	98 13       	cpse	r25, r24
    1392:	f3 9a       	sbi	0x1e, 3	; 30
    1394:	21 e0       	ldi	r18, 0x01	; 1
    1396:	e5 32       	cpi	r30, 0x25	; 37
    1398:	f2 07       	cpc	r31, r18
    139a:	c1 f7       	brne	.-16     	; 0x138c <main+0xdc>
    139c:	f3 9b       	sbis	0x1e, 3	; 30
    139e:	aa cf       	rjmp	.-172    	; 0x12f4 <main+0x44>
    13a0:	80 91 30 01 	lds	r24, 0x0130
    13a4:	84 fd       	sbrc	r24, 4
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <main+0xfc>
    13a8:	77 dd       	rcall	.-1298   	; 0xe98 <usbPoll>
    13aa:	fa cf       	rjmp	.-12     	; 0x13a0 <main+0xf0>
    13ac:	68 e0       	ldi	r22, 0x08	; 8
    13ae:	8c e5       	ldi	r24, 0x5C	; 92
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	50 dd       	rcall	.-1376   	; 0xe54 <usbSetInterrupt>
    13b4:	ad e1       	ldi	r26, 0x1D	; 29
    13b6:	b1 e0       	ldi	r27, 0x01	; 1
    13b8:	ec e5       	ldi	r30, 0x5C	; 92
    13ba:	f1 e0       	ldi	r31, 0x01	; 1
    13bc:	81 91       	ld	r24, Z+
    13be:	8d 93       	st	X+, r24
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	e4 36       	cpi	r30, 0x64	; 100
    13c4:	f8 07       	cpc	r31, r24
    13c6:	d1 f7       	brne	.-12     	; 0x13bc <main+0x10c>
    13c8:	f3 98       	cbi	0x1e, 3	; 30
    13ca:	94 cf       	rjmp	.-216    	; 0x12f4 <main+0x44>

000013cc <_exit>:
    13cc:	f8 94       	cli

000013ce <__stop_program>:
    13ce:	ff cf       	rjmp	.-2      	; 0x13ce <__stop_program>
